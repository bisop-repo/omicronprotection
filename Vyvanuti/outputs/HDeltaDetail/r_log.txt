
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HDeltaDetail.csv"              
[2] "VH"                                      
[3] "outputs/HDeltaDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 23:23:08."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HDeltaDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~  VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16631743, number of events= 4566 

                      coef exp(coef) se(coef)       z Pr(>|z|)    
VaccStatusAfull2  -1.58933   0.20406  0.31720  -5.011 5.43e-07 ***
VaccStatusAfull3  -1.13257   0.32220  0.05772 -19.622  < 2e-16 ***
VaccStatusJfull1  -0.76322   0.46616  0.13771  -5.542 2.99e-08 ***
VaccStatusJfull2  -0.80213   0.44837  0.16564  -4.843 1.28e-06 ***
VaccStatusJfull3  -0.94407   0.38904  0.11358  -8.312  < 2e-16 ***
VaccStatusMboost1 -3.63000   0.02652  0.18707 -19.404  < 2e-16 ***
VaccStatusMboost2 -3.93271   0.01959  1.00065  -3.930 8.49e-05 ***
VaccStatusMfull2  -1.61940   0.19802  0.40874  -3.962 7.44e-05 ***
VaccStatusMfull3  -1.72041   0.17899  0.10795 -15.938  < 2e-16 ***
VaccStatusMpart1  -0.67998   0.50663  0.27803  -2.446   0.0145 *  
VaccStatusPboost1 -3.56260   0.02836  0.07481 -47.622  < 2e-16 ***
VaccStatusPboost2 -3.05765   0.04700  0.18843 -16.227  < 2e-16 ***
VaccStatusPfull1  -1.58737   0.20446  0.15569 -10.196  < 2e-16 ***
VaccStatusPfull2  -1.72356   0.17843  0.12815 -13.449  < 2e-16 ***
VaccStatusPfull3  -1.64280   0.19344  0.04399 -37.342  < 2e-16 ***
VaccStatusPpart1  -0.74255   0.47590  0.12114  -6.129 8.82e-10 ***
VaccStatusPpart2  -0.94469   0.38880  0.57775  -1.635   0.1020    
InfPriorinf1      -3.94432   0.01936  1.00026  -3.943 8.04e-05 ***
InfPriorinf2      -2.68410   0.06828  0.25081 -10.702  < 2e-16 ***
InfPriorinf3      -2.56809   0.07668  0.18327 -14.013  < 2e-16 ***
InfPriorinf4+     -3.84998   0.02128  0.70734  -5.443 5.24e-08 ***
AgeGr0-11         -2.02150   0.13246  0.13837 -14.610  < 2e-16 ***
AgeGr12-15        -2.06909   0.12630  0.27856  -7.428 1.10e-13 ***
AgeGr16-17        -1.49145   0.22505  0.36231  -4.116 3.85e-05 ***
AgeGr18-24        -0.88161   0.41412  0.16297  -5.410 6.31e-08 ***
AgeGr25-29        -0.68501   0.50409  0.14344  -4.776 1.79e-06 ***
AgeGr30-34        -0.30913   0.73408  0.12247  -2.524   0.0116 *  
AgeGr35-39        -0.15606   0.85551  0.11729  -1.331   0.1833    
AgeGr45-49         0.27892   1.32170  0.10968   2.543   0.0110 *  
AgeGr50-54         0.78015   2.18179  0.10326   7.555 4.18e-14 ***
AgeGr55-59         1.02917   2.79875  0.09923  10.372  < 2e-16 ***
AgeGr60-64         1.29524   3.65186  0.09546  13.569  < 2e-16 ***
AgeGr65-69         1.87520   6.52211  0.08917  21.030  < 2e-16 ***
AgeGr70-74         2.30557  10.02993  0.08782  26.253  < 2e-16 ***
AgeGr75-79         2.92437  18.62249  0.08884  32.918  < 2e-16 ***
AgeGr80+           3.30156  27.15505  0.08402  39.297  < 2e-16 ***
SexZ              -0.27397   0.76036  0.03016  -9.084  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2    0.20406    4.90047  0.109588   0.37998
VaccStatusAfull3    0.32220    3.10362  0.287740   0.36080
VaccStatusJfull1    0.46616    2.14517  0.355891   0.61061
VaccStatusJfull2    0.44837    2.23029  0.324078   0.62034
VaccStatusJfull3    0.38904    2.57042  0.311400   0.48604
VaccStatusMboost1   0.02652   37.71286  0.018377   0.03826
VaccStatusMboost2   0.01959   51.04529  0.002756   0.13925
VaccStatusMfull2    0.19802    5.05004  0.088876   0.44119
VaccStatusMfull3    0.17899    5.58682  0.144861   0.22117
VaccStatusMpart1    0.50663    1.97384  0.293783   0.87368
VaccStatusPboost1   0.02836   35.25490  0.024496   0.03284
VaccStatusPboost2   0.04700   21.27749  0.032485   0.06799
VaccStatusPfull1    0.20446    4.89086  0.150691   0.27742
VaccStatusPfull2    0.17843    5.60446  0.138798   0.22938
VaccStatusPfull3    0.19344    5.16965  0.177456   0.21086
VaccStatusPpart1    0.47590    2.10128  0.375316   0.60344
VaccStatusPpart2    0.38880    2.57202  0.125297   1.20645
InfPriorinf1        0.01936   51.64144  0.002726   0.13754
InfPriorinf2        0.06828   14.64498  0.041766   0.11163
InfPriorinf3        0.07668   13.04088  0.053542   0.10982
InfPriorinf4+       0.02128   46.99223  0.005320   0.08513
AgeGr0-11           0.13246    7.54963  0.100994   0.17372
AgeGr12-15          0.12630    7.91761  0.073164   0.21803
AgeGr16-17          0.22505    4.44351  0.110630   0.45780
AgeGr18-24          0.41412    2.41479  0.300887   0.56995
AgeGr25-29          0.50409    1.98379  0.380547   0.66773
AgeGr30-34          0.73408    1.36225  0.577426   0.93324
AgeGr35-39          0.85551    1.16890  0.679811   1.07661
AgeGr45-49          1.32170    0.75660  1.066050   1.63866
AgeGr50-54          2.18179    0.45834  1.782052   2.67119
AgeGr55-59          2.79875    0.35730  2.304095   3.39960
AgeGr60-64          3.65186    0.27383  3.028735   4.40319
AgeGr65-69          6.52211    0.15332  5.476317   7.76762
AgeGr70-74         10.02993    0.09970  8.443928  11.91383
AgeGr75-79         18.62249    0.05370 15.646535  22.16446
AgeGr80+           27.15505    0.03683 23.032274  32.01579
SexZ                0.76036    1.31517  0.716714   0.80665

Concordance= 0.886  (se = 0.002 )
Likelihood ratio test= 12403  on 37 df,   p=<2e-16
Wald test            = 10938  on 37 df,   p=<2e-16
Score (logrank) test = 17161  on 37 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 15.71667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
