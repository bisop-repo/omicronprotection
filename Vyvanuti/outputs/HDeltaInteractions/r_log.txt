
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HDeltaInteractions.csv"              
[2] "VHI"                                           
[3] "outputs/HDeltaInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-08-30 10:56:28."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HDeltaInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ Immunity + AgeGr + 
    Sex, data = mtab)

  n= 16215342, number of events= 4559 

                           coef exp(coef)  se(coef)       z Pr(>|z|)    
Immunityboost2-_alone -3.600653  0.027306  0.070818 -50.844  < 2e-16 ***
Immunityboost2+_alone -3.152397  0.042750  0.188445 -16.728  < 2e-16 ***
Immunityfull2-_alone  -1.293566  0.274291  0.106784 -12.114  < 2e-16 ***
Immunityfull2+_alone  -1.485827  0.226315  0.034414 -43.175  < 2e-16 ***
Immunityfull2+_inf6-  -3.371169  0.034349  1.000406  -3.370 0.000752 ***
Immunityinf6+_alone   -2.834749  0.058733  0.197077 -14.384  < 2e-16 ***
Immunityinf6+_boost2- -5.230843  0.005349  0.500446 -10.452  < 2e-16 ***
Immunityinf6+_boost2+ -3.862007  0.021026  1.000470  -3.860 0.000113 ***
Immunityinf6+_full2-  -3.405796  0.033180  0.500404  -6.806 1.00e-11 ***
Immunityinf6+_full2+  -4.279115  0.013855  0.268019 -15.966  < 2e-16 ***
Immunitypart_alone    -0.751501  0.471658  0.111512  -6.739 1.59e-11 ***
AgeGr0-11             -1.993058  0.136278  0.138478 -14.393  < 2e-16 ***
AgeGr12-15            -2.072705  0.125845  0.278483  -7.443 9.85e-14 ***
AgeGr16-17            -1.522266  0.218217  0.362099  -4.204 2.62e-05 ***
AgeGr18-24            -0.860399  0.422993  0.161613  -5.324 1.02e-07 ***
AgeGr25-29            -0.685174  0.504002  0.144260  -4.750 2.04e-06 ***
AgeGr30-34            -0.306949  0.735688  0.122928  -2.497 0.012525 *  
AgeGr35-39            -0.146262  0.863932  0.117437  -1.245 0.212969    
AgeGr45-49             0.270713  1.310898  0.109997   2.461 0.013851 *  
AgeGr50-54             0.775801  2.172332  0.103528   7.494 6.70e-14 ***
AgeGr55-59             1.029668  2.800135  0.099477  10.351  < 2e-16 ***
AgeGr60-64             1.310019  3.706246  0.095626  13.699  < 2e-16 ***
AgeGr65-69             1.895348  6.654866  0.089308  21.223  < 2e-16 ***
AgeGr70-74             2.347699 10.461466  0.087788  26.743  < 2e-16 ***
AgeGr75-79             2.988689 19.859630  0.088499  33.771  < 2e-16 ***
AgeGr80+               3.350184 28.507969  0.083937  39.913  < 2e-16 ***
SexZ                  -0.281288  0.754811  0.030171  -9.323  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone  0.027306   36.62213  0.023767   0.03137
Immunityboost2+_alone  0.042750   23.39207  0.029548   0.06185
Immunityfull2-_alone   0.274291    3.64576  0.222493   0.33815
Immunityfull2+_alone   0.226315    4.41862  0.211554   0.24211
Immunityfull2+_inf6-   0.034349   29.11253  0.004835   0.24404
Immunityinf6+_alone    0.058733   17.02613  0.039915   0.08642
Immunityinf6+_boost2-  0.005349  186.95038  0.002006   0.01426
Immunityinf6+_boost2+  0.021026   47.56070  0.002959   0.14940
Immunityinf6+_full2-   0.033180   30.13828  0.012443   0.08848
Immunityinf6+_full2+   0.013855   72.17653  0.008193   0.02343
Immunitypart_alone     0.471658    2.12018  0.379060   0.58688
AgeGr0-11              0.136278    7.33794  0.103885   0.17877
AgeGr12-15             0.125845    7.94629  0.072911   0.21721
AgeGr16-17             0.218217    4.58260  0.107317   0.44372
AgeGr18-24             0.422993    2.36410  0.308154   0.58063
AgeGr25-29             0.504002    1.98412  0.379873   0.66869
AgeGr30-34             0.735688    1.35927  0.578172   0.93612
AgeGr35-39             0.863932    1.15750  0.686304   1.08753
AgeGr45-49             1.310898    0.76284  1.056671   1.62629
AgeGr50-54             2.172332    0.46033  1.773384   2.66103
AgeGr55-59             2.800135    0.35713  2.304116   3.40293
AgeGr60-64             3.706246    0.26981  3.072820   4.47024
AgeGr65-69             6.654866    0.15027  5.586253   7.92790
AgeGr70-74            10.461466    0.09559  8.807803  12.42560
AgeGr75-79            19.859630    0.05035 16.697098  23.62117
AgeGr80+              28.507969    0.03508 24.183485  33.60576
SexZ                   0.754811    1.32483  0.711470   0.80079

Concordance= 0.884  (se = 0.003 )
Likelihood ratio test= 12213  on 27 df,   p=<2e-16
Wald test            = 11125  on 27 df,   p=<2e-16
Score (logrank) test = 17358  on 27 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 10.01667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
