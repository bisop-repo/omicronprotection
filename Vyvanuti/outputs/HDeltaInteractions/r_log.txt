
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HDeltaInteractions.csv"              
[2] "VHI"                                           
[3] "outputs/HDeltaInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-07-21 20:26:44."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HDeltaInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ Immunity + AgeGr + 
    Sex, data = mtab, cluster = Subject)

  n= 16654530, number of events= 4534 

                            coef  exp(coef)   se(coef)  robust se        z
Immunityboost2-_alone -3.7629137  0.0232160  0.0730814  0.0756740  -49.725
Immunityboost2+_alone -3.3684612  0.0344426  0.1951851  0.2029506  -16.597
Immunityboost2+_inf6- -7.5346182  0.0005343  0.0000000  0.0000000     -Inf
Immunityfull2-_alone  -1.3674648  0.2547520  0.1109565  0.1156646  -11.823
Immunityfull2+_alone  -1.5826353  0.2054330  0.0351151  0.0361936  -43.727
Immunityfull2+_inf6-  -5.6138759  0.0036469  2.9635405  0.0305486 -183.769
Immunityinf6-_alone   -3.6611584  0.0257027  0.9982224  0.0270594 -135.301
Immunityinf6-_boost2- -5.8877610  0.0027732  8.3329628  0.0418451 -140.704
Immunityinf6-_boost2+ -6.3700533  0.0017121 17.7517963  0.0573920 -110.992
Immunityinf6-_full2-  -3.9049546  0.0201419  8.8021225  0.0591594  -66.007
Immunityinf6-_full2+  -4.5865234  0.0101882  2.2130676  0.0268930 -170.547
Immunityinf6+_alone   -2.9693294  0.0513377  0.2088119  0.1571666  -18.893
Immunityinf6+_boost2- -5.5295299  0.0039679  0.5598203  0.3136334  -17.631
Immunityinf6+_boost2+ -4.0702204  0.0170736  1.0360677  1.0734263   -3.792
Immunityinf6+_full2-  -4.0113695  0.0181086  0.6813533  0.4643363   -8.639
Immunityinf6+_full2+  -4.1269236  0.0161324  0.2487278  0.1752883  -23.544
Immunitypart_alone    -0.8497991  0.4275008  0.1152628  0.1191447   -7.132
AgeGr0-11             -2.0345387  0.1307408  0.1478384  0.1569789  -12.961
AgeGr12-15            -2.0560142  0.1279630  0.2921598  0.3062816   -6.713
AgeGr16-17            -1.4870663  0.2260348  0.3789539  0.3966449   -3.749
AgeGr18-24            -0.8532446  0.4260304  0.1717553  0.1812784   -4.707
AgeGr25-29            -0.7284390  0.4826618  0.1554291  0.1646437   -4.424
AgeGr30-34            -0.3047399  0.7373151  0.1304322  0.1382274   -2.205
AgeGr35-39            -0.1575189  0.8542607  0.1251342  0.1325478   -1.188
AgeGr45-49             0.2834966  1.3277644  0.1168548  0.1239357    2.287
AgeGr50-54             0.7996572  2.2247782  0.1097162  0.1161112    6.887
AgeGr55-59             1.0338990  2.8120085  0.1058307  0.1121721    9.217
AgeGr60-64             1.3113016  3.7110007  0.1016820  0.1077230   12.173
AgeGr65-69             1.9300301  6.8897179  0.0946349  0.1001876   19.264
AgeGr70-74             2.3944170 10.9618059  0.0929585  0.0983304   24.351
AgeGr75-79             3.0317100 20.7326542  0.0938029  0.0994243   30.493
AgeGr80+               3.7261113 41.5173449  0.0874398  0.0914555   40.742
SexZ                  -0.2629911  0.7687487  0.0303617  0.0306470   -8.581
                      Pr(>|z|)    
Immunityboost2-_alone  < 2e-16 ***
Immunityboost2+_alone  < 2e-16 ***
Immunityboost2+_inf6-  < 2e-16 ***
Immunityfull2-_alone   < 2e-16 ***
Immunityfull2+_alone   < 2e-16 ***
Immunityfull2+_inf6-   < 2e-16 ***
Immunityinf6-_alone    < 2e-16 ***
Immunityinf6-_boost2-  < 2e-16 ***
Immunityinf6-_boost2+  < 2e-16 ***
Immunityinf6-_full2-   < 2e-16 ***
Immunityinf6-_full2+   < 2e-16 ***
Immunityinf6+_alone    < 2e-16 ***
Immunityinf6+_boost2-  < 2e-16 ***
Immunityinf6+_boost2+ 0.000150 ***
Immunityinf6+_full2-   < 2e-16 ***
Immunityinf6+_full2+   < 2e-16 ***
Immunitypart_alone    9.86e-13 ***
AgeGr0-11              < 2e-16 ***
AgeGr12-15            1.91e-11 ***
AgeGr16-17            0.000177 ***
AgeGr18-24            2.52e-06 ***
AgeGr25-29            9.67e-06 ***
AgeGr30-34            0.027480 *  
AgeGr35-39            0.234679    
AgeGr45-49            0.022170 *  
AgeGr50-54            5.70e-12 ***
AgeGr55-59             < 2e-16 ***
AgeGr60-64             < 2e-16 ***
AgeGr65-69             < 2e-16 ***
AgeGr70-74             < 2e-16 ***
AgeGr75-79             < 2e-16 ***
AgeGr80+               < 2e-16 ***
SexZ                   < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone 2.322e-02  4.307e+01 2.002e-02 2.693e-02
Immunityboost2+_alone 3.444e-02  2.903e+01 2.314e-02 5.127e-02
Immunityboost2+_inf6- 5.343e-04  1.872e+03 5.343e-04 5.343e-04
Immunityfull2-_alone  2.548e-01  3.925e+00 2.031e-01 3.196e-01
Immunityfull2+_alone  2.054e-01  4.868e+00 1.914e-01 2.205e-01
Immunityfull2+_inf6-  3.647e-03  2.742e+02 3.435e-03 3.872e-03
Immunityinf6-_alone   2.570e-02  3.891e+01 2.438e-02 2.710e-02
Immunityinf6-_boost2- 2.773e-03  3.606e+02 2.555e-03 3.010e-03
Immunityinf6-_boost2+ 1.712e-03  5.841e+02 1.530e-03 1.916e-03
Immunityinf6-_full2-  2.014e-02  4.965e+01 1.794e-02 2.262e-02
Immunityinf6-_full2+  1.019e-02  9.815e+01 9.665e-03 1.074e-02
Immunityinf6+_alone   5.134e-02  1.948e+01 3.773e-02 6.986e-02
Immunityinf6+_boost2- 3.968e-03  2.520e+02 2.146e-03 7.337e-03
Immunityinf6+_boost2+ 1.707e-02  5.857e+01 2.083e-03 1.400e-01
Immunityinf6+_full2-  1.811e-02  5.522e+01 7.289e-03 4.499e-02
Immunityinf6+_full2+  1.613e-02  6.199e+01 1.144e-02 2.275e-02
Immunitypart_alone    4.275e-01  2.339e+00 3.385e-01 5.399e-01
AgeGr0-11             1.307e-01  7.649e+00 9.611e-02 1.778e-01
AgeGr12-15            1.280e-01  7.815e+00 7.021e-02 2.332e-01
AgeGr16-17            2.260e-01  4.424e+00 1.039e-01 4.918e-01
AgeGr18-24            4.260e-01  2.347e+00 2.986e-01 6.078e-01
AgeGr25-29            4.827e-01  2.072e+00 3.495e-01 6.665e-01
AgeGr30-34            7.373e-01  1.356e+00 5.623e-01 9.667e-01
AgeGr35-39            8.543e-01  1.171e+00 6.588e-01 1.108e+00
AgeGr45-49            1.328e+00  7.531e-01 1.041e+00 1.693e+00
AgeGr50-54            2.225e+00  4.495e-01 1.772e+00 2.793e+00
AgeGr55-59            2.812e+00  3.556e-01 2.257e+00 3.503e+00
AgeGr60-64            3.711e+00  2.695e-01 3.005e+00 4.583e+00
AgeGr65-69            6.890e+00  1.451e-01 5.661e+00 8.385e+00
AgeGr70-74            1.096e+01  9.123e-02 9.040e+00 1.329e+01
AgeGr75-79            2.073e+01  4.823e-02 1.706e+01 2.519e+01
AgeGr80+              4.152e+01  2.409e-02 3.470e+01 4.967e+01
SexZ                  7.687e-01  1.301e+00 7.239e-01 8.163e-01

Concordance= 0.889  (se = 0.002 )
Likelihood ratio test= 12298  on 33 df,   p=<2e-16
Wald test            = 59198  on 33 df,   p=<2e-16
Score (logrank) test = 17560  on 33 df,   p=<2e-16,   Robust = 4155  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 26.05 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
