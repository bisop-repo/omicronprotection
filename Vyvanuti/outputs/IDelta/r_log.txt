
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IDelta.csv"               "VI"                                
[3] "outputs/IDelta//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-02-17 11:41:42."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IDelta.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab, cluster = Subject)

  n= 17922498, number of events= 89397 

                      coef exp(coef)  se(coef) robust se        z Pr(>|z|)    
VaccStatusboost1 -2.340871  0.096244  0.022898  0.023275 -100.574  < 2e-16 ***
VaccStatusboost2 -1.648697  0.192300  0.060508  0.060700  -27.162  < 2e-16 ***
VaccStatusfull1  -1.338879  0.262139  0.023985  0.024038  -55.698  < 2e-16 ***
VaccStatusfull2  -1.162606  0.312670  0.016038  0.016188  -71.818  < 2e-16 ***
VaccStatusfull3  -0.793774  0.452135  0.008415  0.008420  -94.269  < 2e-16 ***
VaccStatuspart1  -1.084866  0.337947  0.030616  0.030668  -35.375  < 2e-16 ***
InfPriorinf1     -2.944482  0.052629  0.112636  0.112548  -26.162  < 2e-16 ***
InfPriorinf2     -2.474283  0.084223  0.048058  0.048086  -51.455  < 2e-16 ***
InfPriorinf3     -1.909034  0.148223  0.027282  0.027303  -69.920  < 2e-16 ***
InfPriorinf4+    -1.487631  0.225907  0.042263  0.042266  -35.197  < 2e-16 ***
AgeGr0-11        -0.558520  0.572055  0.013788  0.013646  -40.929  < 2e-16 ***
AgeGr12-15        0.077418  1.080493  0.017161  0.017126    4.521 6.17e-06 ***
AgeGr16-17        0.089789  1.093944  0.024654  0.024690    3.637 0.000276 ***
AgeGr18-24       -0.144330  0.865602  0.017180  0.017213   -8.385  < 2e-16 ***
AgeGr25-29       -0.265318  0.766962  0.017332  0.017301  -15.335  < 2e-16 ***
AgeGr30-34       -0.092060  0.912050  0.015794  0.015771   -5.837 5.30e-09 ***
AgeGr35-39        0.040234  1.041055  0.015169  0.015174    2.652 0.008012 ** 
AgeGr45-49        0.087508  1.091451  0.015151  0.015215    5.751 8.86e-09 ***
AgeGr50-54       -0.069105  0.933229  0.016918  0.016978   -4.070 4.70e-05 ***
AgeGr55-59       -0.153093  0.858050  0.017623  0.017668   -8.665  < 2e-16 ***
AgeGr60-64       -0.478685  0.619598  0.020170  0.020191  -23.708  < 2e-16 ***
AgeGr65-69       -0.556854  0.573009  0.020908  0.020961  -26.566  < 2e-16 ***
AgeGr70-74       -0.566906  0.567278  0.023020  0.023131  -24.509  < 2e-16 ***
AgeGr75-79       -0.395511  0.673336  0.027168  0.027499  -14.383  < 2e-16 ***
AgeGr80+         -0.412141  0.662231  0.025377  0.025622  -16.085  < 2e-16 ***
SexZ              0.116677  1.123756  0.006716  0.006741   17.307  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                 exp(coef) exp(-coef) lower .95 upper .95
VaccStatusboost1   0.09624    10.3903   0.09195   0.10074
VaccStatusboost2   0.19230     5.2002   0.17073   0.21659
VaccStatusfull1    0.26214     3.8148   0.25008   0.27479
VaccStatusfull2    0.31267     3.1983   0.30291   0.32275
VaccStatusfull3    0.45214     2.2117   0.44473   0.45966
VaccStatuspart1    0.33795     2.9590   0.31823   0.35888
InfPriorinf1       0.05263    19.0008   0.04221   0.06562
InfPriorinf2       0.08422    11.8732   0.07665   0.09255
InfPriorinf3       0.14822     6.7466   0.14050   0.15637
InfPriorinf4+      0.22591     4.4266   0.20795   0.24542
AgeGr0-11          0.57206     1.7481   0.55696   0.58756
AgeGr12-15         1.08049     0.9255   1.04483   1.11738
AgeGr16-17         1.09394     0.9141   1.04227   1.14818
AgeGr18-24         0.86560     1.1553   0.83689   0.89530
AgeGr25-29         0.76696     1.3038   0.74139   0.79342
AgeGr30-34         0.91205     1.0964   0.88429   0.94068
AgeGr35-39         1.04105     0.9606   1.01055   1.07248
AgeGr45-49         1.09145     0.9162   1.05938   1.12449
AgeGr50-54         0.93323     1.0715   0.90268   0.96481
AgeGr55-59         0.85805     1.1654   0.82885   0.88828
AgeGr60-64         0.61960     1.6140   0.59556   0.64461
AgeGr65-69         0.57301     1.7452   0.54994   0.59704
AgeGr70-74         0.56728     1.7628   0.54213   0.59359
AgeGr75-79         0.67334     1.4851   0.63801   0.71062
AgeGr80+           0.66223     1.5100   0.62980   0.69634
SexZ               1.12376     0.8899   1.10901   1.13870

Concordance= 0.716  (se = 0.001 )
Likelihood ratio test= 56533  on 26 df,   p=<2e-16
Wald test            = 39493  on 26 df,   p=<2e-16
Score (logrank) test = 48836  on 26 df,   p=<2e-16,   Robust = 56376  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 15.03333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
