
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/OOmicronInteractions.csv"              
[2] "VOI"                                             
[3] "outputs/OOmicronInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-07-21 17:24:33."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/OOmicronInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantOxygen) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantOxygen) ~ Immunity + AgeGr + 
    Sex, data = mtab, cluster = Subject)

  n= 16790288, number of events= 787 
   (44 observations deleted due to missingness)

                          coef exp(coef) se(coef) robust se       z Pr(>|z|)
Immunityboost2-_alone -2.29105   0.10116  0.11498   0.11623 -19.712  < 2e-16
Immunityboost2+_alone -1.86883   0.15430  0.13138   0.13254 -14.100  < 2e-16
Immunityfull2-_alone  -0.83553   0.43364  0.22593   0.22712  -3.679 0.000234
Immunityfull2+_alone  -0.39305   0.67499  0.08719   0.08776  -4.479 7.50e-06
Immunityinf6-_alone   -1.64982   0.19208  0.58073   0.58126  -2.838 0.004535
Immunityinf6+_alone   -2.08594   0.12419  0.41220   0.41130  -5.072 3.94e-07
Immunityinteractions  -2.89566   0.05526  0.26466   0.26530 -10.915  < 2e-16
Immunitypart_alone    -1.32370   0.26615  0.58020   0.58027  -2.281 0.022537
AgeGr0-11             -0.75148   0.47167  0.37523   0.37327  -2.013 0.044088
AgeGr12-15            -0.66146   0.51609  0.57200   0.57279  -1.155 0.248165
AgeGr16-17            -1.12772   0.32377  1.03787   1.03908  -1.085 0.277787
AgeGr18-24            -0.26229   0.76929  0.44959   0.45006  -0.583 0.560045
AgeGr25-29            -0.56674   0.56737  0.49358   0.49350  -1.148 0.250795
AgeGr30-34            -0.06566   0.93645  0.40970   0.40950  -0.160 0.872604
AgeGr35-39            -0.16297   0.84962  0.42063   0.42056  -0.387 0.698388
AgeGr45-49             0.46571   1.59314  0.36855   0.36917   1.262 0.207128
AgeGr50-54             1.02542   2.78827  0.34709   0.34752   2.951 0.003171
AgeGr55-59             1.73012   5.64130  0.31661   0.31677   5.462 4.71e-08
AgeGr60-64             1.80609   6.08663  0.31756   0.31682   5.701 1.19e-08
AgeGr65-69             2.54042  12.68506  0.29922   0.29897   8.497  < 2e-16
AgeGr70-74             2.97109  19.51326  0.29542   0.29556  10.052  < 2e-16
AgeGr75-79             3.80943  45.12468  0.29198   0.29365  12.973  < 2e-16
AgeGr80+               4.34554  77.13330  0.28537   0.28527  15.233  < 2e-16
SexZ                  -0.57248   0.56413  0.07268   0.07394  -7.742 9.76e-15
                         
Immunityboost2-_alone ***
Immunityboost2+_alone ***
Immunityfull2-_alone  ***
Immunityfull2+_alone  ***
Immunityinf6-_alone   ** 
Immunityinf6+_alone   ***
Immunityinteractions  ***
Immunitypart_alone    *  
AgeGr0-11             *  
AgeGr12-15               
AgeGr16-17               
AgeGr18-24               
AgeGr25-29               
AgeGr30-34               
AgeGr35-39               
AgeGr45-49               
AgeGr50-54            ** 
AgeGr55-59            ***
AgeGr60-64            ***
AgeGr65-69            ***
AgeGr70-74            ***
AgeGr75-79            ***
AgeGr80+              ***
SexZ                  ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone   0.10116    9.88536   0.08055   0.12704
Immunityboost2+_alone   0.15430    6.48069   0.11900   0.20008
Immunityfull2-_alone    0.43364    2.30604   0.27785   0.67680
Immunityfull2+_alone    0.67499    1.48150   0.56833   0.80168
Immunityinf6-_alone     0.19208    5.20603   0.06148   0.60015
Immunityinf6+_alone     0.12419    8.05218   0.05546   0.27809
Immunityinteractions    0.05526   18.09537   0.03286   0.09295
Immunitypart_alone      0.26615    3.75730   0.08535   0.82994
AgeGr0-11               0.47167    2.12014   0.22694   0.98030
AgeGr12-15              0.51609    1.93763   0.16795   1.58594
AgeGr16-17              0.32377    3.08860   0.04224   2.48145
AgeGr18-24              0.76929    1.29990   0.31842   1.85860
AgeGr25-29              0.56737    1.76251   0.21568   1.49256
AgeGr30-34              0.93645    1.06787   0.41968   2.08954
AgeGr35-39              0.84962    1.17700   0.37260   1.93735
AgeGr45-49              1.59314    0.62769   0.77271   3.28465
AgeGr50-54              2.78827    0.35865   1.41098   5.50995
AgeGr55-59              5.64130    0.17726   3.03211  10.49576
AgeGr60-64              6.08663    0.16429   3.27112  11.32550
AgeGr65-69             12.68506    0.07883   7.06008  22.79162
AgeGr70-74             19.51326    0.05125  10.93317  34.82679
AgeGr75-79             45.12468    0.02216  25.37821  80.23566
AgeGr80+               77.13330    0.01296  44.09828 134.91560
SexZ                    0.56413    1.77266   0.48802   0.65210

Concordance= 0.878  (se = 0.007 )
Likelihood ratio test= 2171  on 24 df,   p=<2e-16
Wald test            = 1835  on 24 df,   p=<2e-16
Score (logrank) test = 3355  on 24 df,   p=<2e-16,   Robust = 626.2  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 9.25 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
