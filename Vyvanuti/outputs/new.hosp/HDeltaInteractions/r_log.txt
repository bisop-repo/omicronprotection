
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HDeltaInteractions.csv"              
[2] "VHI"                                           
[3] "outputs/HDeltaInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-02-23 13:48:42."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HDeltaInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ Immunity + AgeGr + 
    Sex, data = mtab, cluster = Subject)

  n= 16654171, number of events= 4559 

                            coef  exp(coef)   se(coef)  robust se        z
Immunityboost2-_alone -3.6006528  0.0273059  0.0708180  0.0710121  -50.705
Immunityboost2+_alone -3.1523972  0.0427495  0.1884476  0.1891942  -16.662
Immunityboost2+_inf6- -8.0899348  0.0003066  0.0000000  0.0000000     -Inf
Immunityfull2-_alone  -1.2935658  0.2742910  0.1067849  0.1071413  -12.073
Immunityfull2+_alone  -1.4858269  0.2263151  0.0344141  0.0347384  -42.772
Immunityfull2+_inf6-  -3.3711685  0.0343495  1.0004173  1.0002161   -3.370
Immunityinf6-_alone   -6.9424368  0.0009659  5.0835529  0.0263362 -263.609
Immunityinf6-_boost2- -8.5213851  0.0001992 32.0015440  0.0402881 -211.511
Immunityinf6-_boost2+ -8.7482150  0.0001587 62.2213955  0.0560623 -156.044
Immunityinf6-_full2-  -7.0245233  0.0008898 41.6058884  0.0525013 -133.797
Immunityinf6-_full2+  -7.7151688  0.0004460 10.5546499  0.0260832 -295.791
Immunityinf6+_alone   -2.8347494  0.0587332  0.1970784  0.1971213  -14.381
Immunityinf6+_boost2- -5.2306559  0.0053500  0.5004025  0.5003977  -10.453
Immunityinf6+_boost2+ -3.8620068  0.0210258  1.0004821  1.0009712   -3.858
Immunityinf6+_full2-  -3.4057962  0.0331804  0.5004068  0.5004299   -6.806
Immunityinf6+_full2+  -4.2790681  0.0138556  0.2680144  0.2681353  -15.959
Immunitypart_alone    -0.7515011  0.4716580  0.1115125  0.1114965   -6.740
AgeGr0-11             -1.9930576  0.1362781  0.1384776  0.1384831  -14.392
AgeGr12-15            -2.0727054  0.1258449  0.2784781  0.2783130   -7.447
AgeGr16-17            -1.5222665  0.2182167  0.3620924  0.3621862   -4.203
AgeGr18-24            -0.8603993  0.4229932  0.1616112  0.1618670   -5.315
AgeGr25-29            -0.6851741  0.5040025  0.1442590  0.1442374   -4.750
AgeGr30-34            -0.3069494  0.7356878  0.1229271  0.1229342   -2.497
AgeGr35-39            -0.1462616  0.8639316  0.1174369  0.1174059   -1.246
AgeGr45-49             0.2707126  1.3108982  0.1099961  0.1101663    2.457
AgeGr50-54             0.7758013  2.1723322  0.1035279  0.1036814    7.483
AgeGr55-59             1.0296675  2.8001347  0.0994762  0.0995934   10.339
AgeGr60-64             1.3100194  3.7062457  0.0956258  0.0956671   13.694
AgeGr65-69             1.8953483  6.6548658  0.0893073  0.0894739   21.183
AgeGr70-74             2.3476986 10.4614660  0.0877873  0.0879313   26.699
AgeGr75-79             2.9886890 19.8596300  0.0884983  0.0887639   33.670
AgeGr80+               3.3501837 28.5079692  0.0839368  0.0840377   39.865
SexZ                  -0.2812878  0.7548111  0.0301708  0.0303475   -9.269
                      Pr(>|z|)    
Immunityboost2-_alone  < 2e-16 ***
Immunityboost2+_alone  < 2e-16 ***
Immunityboost2+_inf6-  < 2e-16 ***
Immunityfull2-_alone   < 2e-16 ***
Immunityfull2+_alone   < 2e-16 ***
Immunityfull2+_inf6-  0.000750 ***
Immunityinf6-_alone    < 2e-16 ***
Immunityinf6-_boost2-  < 2e-16 ***
Immunityinf6-_boost2+  < 2e-16 ***
Immunityinf6-_full2-   < 2e-16 ***
Immunityinf6-_full2+   < 2e-16 ***
Immunityinf6+_alone    < 2e-16 ***
Immunityinf6+_boost2-  < 2e-16 ***
Immunityinf6+_boost2+ 0.000114 ***
Immunityinf6+_full2-  1.01e-11 ***
Immunityinf6+_full2+   < 2e-16 ***
Immunitypart_alone    1.58e-11 ***
AgeGr0-11              < 2e-16 ***
AgeGr12-15            9.52e-14 ***
AgeGr16-17            2.63e-05 ***
AgeGr18-24            1.06e-07 ***
AgeGr25-29            2.03e-06 ***
AgeGr30-34            0.012530 *  
AgeGr35-39            0.212846    
AgeGr45-49            0.013998 *  
AgeGr50-54            7.29e-14 ***
AgeGr55-59             < 2e-16 ***
AgeGr60-64             < 2e-16 ***
AgeGr65-69             < 2e-16 ***
AgeGr70-74             < 2e-16 ***
AgeGr75-79             < 2e-16 ***
AgeGr80+               < 2e-16 ***
SexZ                   < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone 2.731e-02  3.662e+01 2.376e-02 3.138e-02
Immunityboost2+_alone 4.275e-02  2.339e+01 2.950e-02 6.194e-02
Immunityboost2+_inf6- 3.066e-04  3.261e+03 3.066e-04 3.066e-04
Immunityfull2-_alone  2.743e-01  3.646e+00 2.223e-01 3.384e-01
Immunityfull2+_alone  2.263e-01  4.419e+00 2.114e-01 2.423e-01
Immunityfull2+_inf6-  3.435e-02  2.911e+01 4.837e-03 2.440e-01
Immunityinf6-_alone   9.659e-04  1.035e+03 9.173e-04 1.017e-03
Immunityinf6-_boost2- 1.992e-04  5.021e+03 1.840e-04 2.155e-04
Immunityinf6-_boost2+ 1.587e-04  6.299e+03 1.422e-04 1.772e-04
Immunityinf6-_full2-  8.898e-04  1.124e+03 8.028e-04 9.862e-04
Immunityinf6-_full2+  4.460e-04  2.242e+03 4.238e-04 4.694e-04
Immunityinf6+_alone   5.873e-02  1.703e+01 3.991e-02 8.643e-02
Immunityinf6+_boost2- 5.350e-03  1.869e+02 2.006e-03 1.427e-02
Immunityinf6+_boost2+ 2.103e-02  4.756e+01 2.956e-03 1.495e-01
Immunityinf6+_full2-  3.318e-02  3.014e+01 1.244e-02 8.848e-02
Immunityinf6+_full2+  1.386e-02  7.217e+01 8.192e-03 2.343e-02
Immunitypart_alone    4.717e-01  2.120e+00 3.791e-01 5.869e-01
AgeGr0-11             1.363e-01  7.338e+00 1.039e-01 1.788e-01
AgeGr12-15            1.258e-01  7.946e+00 7.293e-02 2.171e-01
AgeGr16-17            2.182e-01  4.583e+00 1.073e-01 4.438e-01
AgeGr18-24            4.230e-01  2.364e+00 3.080e-01 5.809e-01
AgeGr25-29            5.040e-01  1.984e+00 3.799e-01 6.687e-01
AgeGr30-34            7.357e-01  1.359e+00 5.782e-01 9.361e-01
AgeGr35-39            8.639e-01  1.157e+00 6.863e-01 1.087e+00
AgeGr45-49            1.311e+00  7.628e-01 1.056e+00 1.627e+00
AgeGr50-54            2.172e+00  4.603e-01 1.773e+00 2.662e+00
AgeGr55-59            2.800e+00  3.571e-01 2.304e+00 3.404e+00
AgeGr60-64            3.706e+00  2.698e-01 3.073e+00 4.471e+00
AgeGr65-69            6.655e+00  1.503e-01 5.584e+00 7.930e+00
AgeGr70-74            1.046e+01  9.559e-02 8.805e+00 1.243e+01
AgeGr75-79            1.986e+01  5.035e-02 1.669e+01 2.363e+01
AgeGr80+              2.851e+01  3.508e-02 2.418e+01 3.361e+01
SexZ                  7.548e-01  1.325e+00 7.112e-01 8.011e-01

Concordance= 0.885  (se = 0.002 )
Likelihood ratio test= 12292  on 33 df,   p=<2e-16
Wald test            = 141037  on 33 df,   p=<2e-16
Score (logrank) test = 17484  on 33 df,   p=<2e-16,   Robust = 4013  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 26.73333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
