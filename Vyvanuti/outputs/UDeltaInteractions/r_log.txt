
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/UDeltaInteractions.csv"              
[2] "VUI"                                           
[3] "outputs/UDeltaInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-07-23 17:46:39."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/UDeltaInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantICU) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantICU) ~ Immunity + AgeGr + 
    Sex, data = mtab, cluster = Subject)

  n= 16790332, number of events= 859 

                            coef  exp(coef)   se(coef)  robust se        z
Immunityboost2-_alone -3.932e+00  1.960e-02  1.758e-01  1.766e-01  -22.269
Immunityboost2+_alone -3.546e+00  2.885e-02  5.053e-01  5.078e-01   -6.982
Immunityfull2-_alone  -1.856e+00  1.563e-01  2.919e-01  2.919e-01   -6.359
Immunityfull2+_alone  -1.959e+00  1.410e-01  8.534e-02  8.675e-02  -22.585
Immunityinf6-_alone   -1.567e+01  1.573e-07  8.409e+02  5.556e-02 -281.949
Immunityinf6+_alone   -3.466e+00  3.125e-02  5.789e-01  5.791e-01   -5.985
Immunityinteractions  -4.769e+00  8.488e-03  5.018e-01  5.016e-01   -9.507
Immunitypart_alone    -1.156e+00  3.148e-01  2.918e-01  2.921e-01   -3.956
AgeGr0-11             -2.489e+00  8.298e-02  4.065e-01  4.066e-01   -6.122
AgeGr12-15            -1.605e+01  1.075e-07  7.277e+02  2.001e-01  -80.172
AgeGr16-17            -1.696e+00  1.833e-01  1.020e+00  1.020e+00   -1.663
AgeGr18-24            -9.031e-01  4.053e-01  4.277e-01  4.279e-01   -2.110
AgeGr25-29            -3.036e+00  4.803e-02  1.020e+00  1.020e+00   -2.977
AgeGr30-34            -5.022e-01  6.052e-01  3.338e-01  3.337e-01   -1.505
AgeGr35-39            -1.456e-01  8.645e-01  3.000e-01  2.999e-01   -0.485
AgeGr45-49             6.682e-01  1.951e+00  2.604e-01  2.609e-01    2.561
AgeGr50-54             1.298e+00  3.661e+00  2.427e-01  2.430e-01    5.340
AgeGr55-59             1.645e+00  5.179e+00  2.326e-01  2.329e-01    7.061
AgeGr60-64             1.781e+00  5.933e+00  2.299e-01  2.301e-01    7.738
AgeGr65-69             2.485e+00  1.200e+01  2.175e-01  2.180e-01   11.399
AgeGr70-74             2.933e+00  1.878e+01  2.154e-01  2.158e-01   13.591
AgeGr75-79             3.337e+00  2.812e+01  2.218e-01  2.225e-01   14.993
AgeGr80+               3.128e+00  2.282e+01  2.195e-01  2.208e-01   14.164
SexZ                  -5.956e-01  5.512e-01  7.017e-02  7.148e-02   -8.332
                      Pr(>|z|)    
Immunityboost2-_alone  < 2e-16 ***
Immunityboost2+_alone 2.90e-12 ***
Immunityfull2-_alone  2.03e-10 ***
Immunityfull2+_alone   < 2e-16 ***
Immunityinf6-_alone    < 2e-16 ***
Immunityinf6+_alone   2.17e-09 ***
Immunityinteractions   < 2e-16 ***
Immunitypart_alone    7.61e-05 ***
AgeGr0-11             9.25e-10 ***
AgeGr12-15             < 2e-16 ***
AgeGr16-17             0.09625 .  
AgeGr18-24             0.03482 *  
AgeGr25-29             0.00291 ** 
AgeGr30-34             0.13236    
AgeGr35-39             0.62739    
AgeGr45-49             0.01042 *  
AgeGr50-54            9.30e-08 ***
AgeGr55-59            1.65e-12 ***
AgeGr60-64            1.01e-14 ***
AgeGr65-69             < 2e-16 ***
AgeGr70-74             < 2e-16 ***
AgeGr75-79             < 2e-16 ***
AgeGr80+               < 2e-16 ***
SexZ                   < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone 1.960e-02  5.101e+01 1.387e-02 2.771e-02
Immunityboost2+_alone 2.885e-02  3.466e+01 1.066e-02 7.805e-02
Immunityfull2-_alone  1.563e-01  6.399e+00 8.820e-02 2.769e-01
Immunityfull2+_alone  1.410e-01  7.094e+00 1.189e-01 1.671e-01
Immunityinf6-_alone   1.573e-07  6.358e+06 1.411e-07 1.754e-07
Immunityinf6+_alone   3.125e-02  3.200e+01 1.004e-02 9.722e-02
Immunityinteractions  8.488e-03  1.178e+02 3.175e-03 2.269e-02
Immunitypart_alone    3.148e-01  3.176e+00 1.776e-01 5.581e-01
AgeGr0-11             8.298e-02  1.205e+01 3.740e-02 1.841e-01
AgeGr12-15            1.075e-07  9.305e+06 7.260e-08 1.591e-07
AgeGr16-17            1.833e-01  5.454e+00 2.484e-02 1.353e+00
AgeGr18-24            4.053e-01  2.467e+00 1.752e-01 9.376e-01
AgeGr25-29            4.803e-02  2.082e+01 6.508e-03 3.545e-01
AgeGr30-34            6.052e-01  1.652e+00 3.146e-01 1.164e+00
AgeGr35-39            8.645e-01  1.157e+00 4.803e-01 1.556e+00
AgeGr45-49            1.951e+00  5.126e-01 1.170e+00 3.253e+00
AgeGr50-54            3.661e+00  2.732e-01 2.274e+00 5.894e+00
AgeGr55-59            5.179e+00  1.931e-01 3.281e+00 8.175e+00
AgeGr60-64            5.933e+00  1.686e-01 3.779e+00 9.314e+00
AgeGr65-69            1.200e+01  8.336e-02 7.826e+00 1.839e+01
AgeGr70-74            1.878e+01  5.325e-02 1.230e+01 2.866e+01
AgeGr75-79            2.812e+01  3.556e-02 1.818e+01 4.350e+01
AgeGr80+              2.282e+01  4.382e-02 1.480e+01 3.518e+01
SexZ                  5.512e-01  1.814e+00 4.792e-01 6.341e-01

Concordance= 0.911  (se = 0.005 )
Likelihood ratio test= 2712  on 24 df,   p=<2e-16
Wald test            = 277550  on 24 df,   p=<2e-16
Score (logrank) test = 3417  on 24 df,   p=<2e-16,   Robust = 857.3  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 14.18333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
