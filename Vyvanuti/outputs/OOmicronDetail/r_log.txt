
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/OOmicronDetail.csv"              
[2] "VO"                                        
[3] "outputs/OOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 19:45:57."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/OOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantOxygen) ~ VaccStatus + InfPrior  + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantOxygen) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16688139, number of events= 789 
   (45 observations deleted due to missingness)

                        coef  exp(coef)   se(coef)       z Pr(>|z|)    
VaccStatusAfull2   7.543e-01  2.126e+00  1.002e+00   0.753 0.451609    
VaccStatusAfull3  -1.802e-01  8.351e-01  1.462e-01  -1.233 0.217744    
VaccStatusJfull1  -6.871e-01  5.030e-01  5.038e-01  -1.364 0.172651    
VaccStatusJfull2  -2.878e-01  7.499e-01  4.127e-01  -0.697 0.485671    
VaccStatusJfull3  -5.500e-01  5.769e-01  2.944e-01  -1.868 0.061696 .  
VaccStatusMboost1 -2.142e+00  1.174e-01  2.372e-01  -9.031  < 2e-16 ***
VaccStatusMboost2 -1.596e+00  2.027e-01  3.229e-01  -4.943 7.70e-07 ***
VaccStatusMfull1  -8.280e-01  4.369e-01  7.095e-01  -1.167 0.243175    
VaccStatusMfull2  -5.372e-02  9.477e-01  7.095e-01  -0.076 0.939648    
VaccStatusMfull3  -4.120e-01  6.623e-01  2.122e-01  -1.941 0.052216 .  
VaccStatusMpart1  -1.363e+01  1.204e-06  6.250e+02  -0.022 0.982603    
VaccStatusMpart2  -1.357e+01  1.283e-06  2.089e+03  -0.006 0.994819    
VaccStatusPboost1 -2.302e+00  1.000e-01  1.220e-01 -18.865  < 2e-16 ***
VaccStatusPboost2 -1.876e+00  1.533e-01  1.369e-01 -13.695  < 2e-16 ***
VaccStatusPfull1  -8.208e-01  4.401e-01  2.494e-01  -3.291 0.001000 ***
VaccStatusPfull2  -3.560e-02  9.650e-01  2.751e-01  -0.129 0.897038    
VaccStatusPfull3  -4.955e-01  6.092e-01  1.049e-01  -4.722 2.34e-06 ***
VaccStatusPpart1  -1.045e+00  3.518e-01  5.802e-01  -1.801 0.071734 .  
VaccStatusPpart2  -1.338e+01  1.553e-06  9.043e+02  -0.015 0.988199    
InfPriorinf1      -2.370e+00  9.344e-02  5.792e-01  -4.093 4.26e-05 ***
InfPriorinf2      -1.158e+00  3.140e-01  4.507e-01  -2.570 0.010170 *  
InfPriorinf3      -2.137e+00  1.181e-01  3.360e-01  -6.359 2.03e-10 ***
InfPriorinf4+     -1.467e+00  2.305e-01  3.799e-01  -3.862 0.000112 ***
AgeGr0-11         -7.647e-01  4.655e-01  3.754e-01  -2.037 0.041654 *  
AgeGr12-15        -6.940e-01  4.996e-01  5.728e-01  -1.212 0.225646    
AgeGr16-17        -1.142e+00  3.191e-01  1.038e+00  -1.100 0.271202    
AgeGr18-24        -2.740e-01  7.603e-01  4.498e-01  -0.609 0.542416    
AgeGr25-29        -5.799e-01  5.600e-01  4.936e-01  -1.175 0.240109    
AgeGr30-34        -7.441e-02  9.283e-01  4.097e-01  -0.182 0.855881    
AgeGr35-39        -1.677e-01  8.456e-01  4.206e-01  -0.399 0.690145    
AgeGr45-49         4.685e-01  1.598e+00  3.686e-01   1.271 0.203686    
AgeGr50-54         1.026e+00  2.790e+00  3.471e-01   2.956 0.003114 ** 
AgeGr55-59         1.751e+00  5.760e+00  3.158e-01   5.544 2.95e-08 ***
AgeGr60-64         1.799e+00  6.043e+00  3.177e-01   5.663 1.49e-08 ***
AgeGr65-69         2.540e+00  1.268e+01  2.992e-01   8.490  < 2e-16 ***
AgeGr70-74         2.948e+00  1.907e+01  2.960e-01   9.961  < 2e-16 ***
AgeGr75-79         3.778e+00  4.372e+01  2.928e-01  12.902  < 2e-16 ***
AgeGr80+           4.319e+00  7.512e+01  2.861e-01  15.097  < 2e-16 ***
SexZ              -5.695e-01  5.658e-01  7.261e-02  -7.843 4.40e-15 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2  2.126e+00  4.703e-01   0.29827   15.1558
VaccStatusAfull3  8.351e-01  1.197e+00   0.62702    1.1122
VaccStatusJfull1  5.030e-01  1.988e+00   0.18738    1.3504
VaccStatusJfull2  7.499e-01  1.333e+00   0.33398    1.6840
VaccStatusJfull3  5.769e-01  1.733e+00   0.32400    1.0273
VaccStatusMboost1 1.174e-01  8.517e+00   0.07376    0.1869
VaccStatusMboost2 2.027e-01  4.933e+00   0.10767    0.3817
VaccStatusMfull1  4.369e-01  2.289e+00   0.10877    1.7551
VaccStatusMfull2  9.477e-01  1.055e+00   0.23589    3.8075
VaccStatusMfull3  6.623e-01  1.510e+00   0.43698    1.0040
VaccStatusMpart1  1.204e-06  8.303e+05   0.00000       Inf
VaccStatusMpart2  1.283e-06  7.795e+05   0.00000       Inf
VaccStatusPboost1 1.000e-01  9.996e+00   0.07876    0.1271
VaccStatusPboost2 1.533e-01  6.524e+00   0.11720    0.2005
VaccStatusPfull1  4.401e-01  2.272e+00   0.26990    0.7176
VaccStatusPfull2  9.650e-01  1.036e+00   0.56278    1.6548
VaccStatusPfull3  6.092e-01  1.641e+00   0.49598    0.7484
VaccStatusPpart1  3.518e-01  2.843e+00   0.11283    1.0967
VaccStatusPpart2  1.553e-06  6.439e+05   0.00000       Inf
InfPriorinf1      9.344e-02  1.070e+01   0.03003    0.2908
InfPriorinf2      3.140e-01  3.185e+00   0.12980    0.7596
InfPriorinf3      1.181e-01  8.471e+00   0.06111    0.2281
InfPriorinf4+     2.305e-01  4.338e+00   0.10947    0.4854
AgeGr0-11         4.655e-01  2.148e+00   0.22300    0.9715
AgeGr12-15        4.996e-01  2.002e+00   0.16258    1.5351
AgeGr16-17        3.191e-01  3.134e+00   0.04170    2.4413
AgeGr18-24        7.603e-01  1.315e+00   0.31489    1.8359
AgeGr25-29        5.600e-01  1.786e+00   0.21282    1.4735
AgeGr30-34        9.283e-01  1.077e+00   0.41584    2.0722
AgeGr35-39        8.456e-01  1.183e+00   0.37079    1.9285
AgeGr45-49        1.598e+00  6.259e-01   0.77578    3.2899
AgeGr50-54        2.790e+00  3.584e-01   1.41314    5.5090
AgeGr55-59        5.760e+00  1.736e-01   3.10162   10.6952
AgeGr60-64        6.043e+00  1.655e-01   3.24225   11.2623
AgeGr65-69        1.268e+01  7.884e-02   7.05624   22.8001
AgeGr70-74        1.907e+01  5.245e-02  10.67407   34.0533
AgeGr75-79        4.372e+01  2.287e-02  24.62823   77.6080
AgeGr80+          7.512e+01  1.331e-02  42.88086  131.6131
SexZ              5.658e-01  1.767e+00   0.49078    0.6524

Concordance= 0.879  (se = 0.007 )
Likelihood ratio test= 2187  on 39 df,   p=<2e-16
Wald test            = 1909  on 39 df,   p=<2e-16
Score (logrank) test = 3429  on 39 df,   p=<2e-16

