
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/OOmicronDetail.csv"              
[2] "VO"                                        
[3] "outputs/OOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-08-30 23:50:58."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/OOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantOxygen) ~ VaccStatus + InfPrior  + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantOxygen) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16688504, number of events= 765 
   (45 observations deleted due to missingness)

                        coef  exp(coef)   se(coef)       z Pr(>|z|)    
VaccStatusAfull2   7.949e-01  2.214e+00  1.002e+00   0.793  0.42766    
VaccStatusAfull3  -1.876e-01  8.290e-01  1.476e-01  -1.271  0.20375    
VaccStatusJfull1  -6.440e-01  5.252e-01  5.039e-01  -1.278  0.20130    
VaccStatusJfull2  -6.358e-01  5.295e-01  5.037e-01  -1.262  0.20684    
VaccStatusJfull3  -6.104e-01  5.431e-01  3.071e-01  -1.987  0.04688 *  
VaccStatusMboost1 -2.133e+00  1.185e-01  2.374e-01  -8.986  < 2e-16 ***
VaccStatusMboost2 -1.703e+00  1.821e-01  3.398e-01  -5.013 5.37e-07 ***
VaccStatusMfull1  -7.799e-01  4.585e-01  7.095e-01  -1.099  0.27167    
VaccStatusMfull2   2.483e-02  1.025e+00  7.095e-01   0.035  0.97208    
VaccStatusMfull3  -4.281e-01  6.517e-01  2.166e-01  -1.976  0.04814 *  
VaccStatusMpart1  -1.872e+01  7.419e-09  7.946e+03  -0.002  0.99812    
VaccStatusMpart2  -1.867e+01  7.794e-09  2.666e+04  -0.001  0.99944    
VaccStatusPboost1 -2.327e+00  9.756e-02  1.240e-01 -18.769  < 2e-16 ***
VaccStatusPboost2 -1.897e+00  1.500e-01  1.380e-01 -13.743  < 2e-16 ***
VaccStatusPfull1  -7.662e-01  4.648e-01  2.495e-01  -3.071  0.00213 ** 
VaccStatusPfull2   6.964e-03  1.007e+00  2.844e-01   0.024  0.98046    
VaccStatusPfull3  -4.797e-01  6.190e-01  1.065e-01  -4.502 6.73e-06 ***
VaccStatusPpart1  -1.046e+00  3.512e-01  5.802e-01  -1.803  0.07133 .  
VaccStatusPpart2  -1.847e+01  9.494e-09  1.154e+04  -0.002  0.99872    
InfPriorinf1      -1.792e+01  1.651e-08  1.373e+03  -0.013  0.98958    
InfPriorinf2      -1.812e+01  1.350e-08  2.155e+03  -0.008  0.99329    
InfPriorinf3      -1.782e+01  1.816e-08  8.490e+02  -0.021  0.98325    
InfPriorinf4+     -1.764e+01  2.190e-08  1.226e+03  -0.014  0.98853    
AgeGr0-11         -5.208e-01  5.941e-01  4.050e-01  -1.286  0.19855    
AgeGr12-15        -7.302e-01  4.818e-01  6.592e-01  -1.108  0.26800    
AgeGr16-17        -8.925e-01  4.096e-01  1.049e+00  -0.851  0.39503    
AgeGr18-24        -1.059e-02  9.895e-01  4.748e-01  -0.022  0.98221    
AgeGr25-29        -3.187e-01  7.271e-01  5.165e-01  -0.617  0.53722    
AgeGr30-34         8.928e-02  1.093e+00  4.473e-01   0.200  0.84178    
AgeGr35-39         9.185e-02  1.096e+00  4.472e-01   0.205  0.83728    
AgeGr45-49         6.180e-01  1.855e+00  4.084e-01   1.513  0.13022    
AgeGr50-54         1.159e+00  3.186e+00  3.874e-01   2.991  0.00278 ** 
AgeGr55-59         1.998e+00  7.373e+00  3.512e-01   5.689 1.28e-08 ***
AgeGr60-64         2.008e+00  7.451e+00  3.538e-01   5.676 1.37e-08 ***
AgeGr65-69         2.779e+00  1.611e+01  3.358e-01   8.277  < 2e-16 ***
AgeGr70-74         3.160e+00  2.356e+01  3.333e-01   9.480  < 2e-16 ***
AgeGr75-79         4.014e+00  5.534e+01  3.302e-01  12.155  < 2e-16 ***
AgeGr80+           4.562e+00  9.575e+01  3.240e-01  14.079  < 2e-16 ***
SexZ              -5.888e-01  5.550e-01  7.377e-02  -7.981 1.45e-15 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2  2.214e+00  4.516e-01   0.31060   15.7841
VaccStatusAfull3  8.290e-01  1.206e+00   0.62077    1.1070
VaccStatusJfull1  5.252e-01  1.904e+00   0.19560    1.4102
VaccStatusJfull2  5.295e-01  1.889e+00   0.19728    1.4211
VaccStatusJfull3  5.431e-01  1.841e+00   0.29750    0.9916
VaccStatusMboost1 1.185e-01  8.440e+00   0.07441    0.1887
VaccStatusMboost2 1.821e-01  5.491e+00   0.09358    0.3545
VaccStatusMfull1  4.585e-01  2.181e+00   0.11412    1.8417
VaccStatusMfull2  1.025e+00  9.755e-01   0.25519    4.1181
VaccStatusMfull3  6.517e-01  1.534e+00   0.42624    0.9965
VaccStatusMpart1  7.419e-09  1.348e+08   0.00000       Inf
VaccStatusMpart2  7.794e-09  1.283e+08   0.00000       Inf
VaccStatusPboost1 9.756e-02  1.025e+01   0.07651    0.1244
VaccStatusPboost2 1.500e-01  6.665e+00   0.11448    0.1967
VaccStatusPfull1  4.648e-01  2.152e+00   0.28499    0.7579
VaccStatusPfull2  1.007e+00  9.931e-01   0.57673    1.7582
VaccStatusPfull3  6.190e-01  1.616e+00   0.50232    0.7627
VaccStatusPpart1  3.512e-01  2.847e+00   0.11264    1.0951
VaccStatusPpart2  9.494e-09  1.053e+08   0.00000       Inf
InfPriorinf1      1.651e-08  6.055e+07   0.00000       Inf
InfPriorinf2      1.350e-08  7.408e+07   0.00000       Inf
InfPriorinf3      1.816e-08  5.507e+07   0.00000       Inf
InfPriorinf4+     2.190e-08  4.566e+07   0.00000       Inf
AgeGr0-11         5.941e-01  1.683e+00   0.26857    1.3140
AgeGr12-15        4.818e-01  2.076e+00   0.13235    1.7539
AgeGr16-17        4.096e-01  2.441e+00   0.05238    3.2033
AgeGr18-24        9.895e-01  1.011e+00   0.39017    2.5093
AgeGr25-29        7.271e-01  1.375e+00   0.26423    2.0009
AgeGr30-34        1.093e+00  9.146e-01   0.45506    2.6272
AgeGr35-39        1.096e+00  9.122e-01   0.45625    2.6337
AgeGr45-49        1.855e+00  5.390e-01   0.83324    4.1302
AgeGr50-54        3.186e+00  3.139e-01   1.49113    6.8079
AgeGr55-59        7.373e+00  1.356e-01   3.70421   14.6739
AgeGr60-64        7.451e+00  1.342e-01   3.72446   14.9067
AgeGr65-69        1.611e+01  6.207e-02   8.34229   31.1123
AgeGr70-74        2.356e+01  4.244e-02  12.26011   45.2791
AgeGr75-79        5.534e+01  1.807e-02  28.97243  105.7071
AgeGr80+          9.575e+01  1.044e-02  50.74043  180.7038
SexZ              5.550e-01  1.802e+00   0.48028    0.6413

Concordance= 0.896  (se = 0.006 )
Likelihood ratio test= 2302  on 39 df,   p=<2e-16
Wald test            = 1783  on 39 df,   p=<2e-16
Score (logrank) test = 3479  on 39 df,   p=<2e-16

