
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IDeltaDetail.csv"              
[2] "VI"                                      
[3] "outputs/IDeltaDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-08-31 20:42:05."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IDeltaDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 18087592, number of events= 89472 

                       coef exp(coef)  se(coef)       z Pr(>|z|)    
VaccStatusAfull2  -1.038166  0.354103  0.105088  -9.879  < 2e-16 ***
VaccStatusAfull3  -0.595979  0.551023  0.025405 -23.459  < 2e-16 ***
VaccStatusJfull1  -0.908941  0.402951  0.033325 -27.275  < 2e-16 ***
VaccStatusJfull2  -0.851564  0.426747  0.044186 -19.272  < 2e-16 ***
VaccStatusJfull3  -0.761579  0.466929  0.036101 -21.096  < 2e-16 ***
VaccStatusMboost1 -2.550347  0.078055  0.064176 -39.740  < 2e-16 ***
VaccStatusMboost2 -2.408647  0.089937  0.333567  -7.221 5.17e-13 ***
VaccStatusMfull1  -1.219172  0.295475  0.097722 -12.476  < 2e-16 ***
VaccStatusMfull2  -1.393453  0.248217  0.087524 -15.921  < 2e-16 ***
VaccStatusMfull3  -1.116747  0.327343  0.028454 -39.247  < 2e-16 ***
VaccStatusMpart1  -1.123646  0.325092  0.097263 -11.553  < 2e-16 ***
VaccStatusMpart2  -1.107815  0.330280  0.353593  -3.133  0.00173 ** 
VaccStatusPboost1 -2.297140  0.100546  0.023751 -96.718  < 2e-16 ***
VaccStatusPboost2 -1.604490  0.200992  0.061362 -26.148  < 2e-16 ***
VaccStatusPfull1  -1.698239  0.183005  0.035801 -47.435  < 2e-16 ***
VaccStatusPfull2  -1.195618  0.302517  0.017500 -68.322  < 2e-16 ***
VaccStatusPfull3  -0.772430  0.461889  0.008846 -87.321  < 2e-16 ***
VaccStatusPpart1  -1.091894  0.335580  0.032658 -33.434  < 2e-16 ***
VaccStatusPpart2  -0.924327  0.396798  0.112641  -8.206 2.29e-16 ***
InfPriorinf1      -2.951565  0.052258  0.112637 -26.204  < 2e-16 ***
InfPriorinf2      -2.465153  0.084996  0.047950 -51.411  < 2e-16 ***
InfPriorinf3      -1.906621  0.148582  0.027282 -69.885  < 2e-16 ***
InfPriorinf4+     -1.487640  0.225905  0.042263 -35.200  < 2e-16 ***
AgeGr0-11         -0.556053  0.573468  0.013795 -40.308  < 2e-16 ***
AgeGr12-15         0.092781  1.097222  0.017198   5.395 6.86e-08 ***
AgeGr16-17         0.107468  1.113455  0.024689   4.353 1.34e-05 ***
AgeGr18-24        -0.138681  0.870506  0.017171  -8.077 6.66e-16 ***
AgeGr25-29        -0.262019  0.769497  0.017324 -15.125  < 2e-16 ***
AgeGr30-34        -0.089689  0.914216  0.015785  -5.682 1.33e-08 ***
AgeGr35-39         0.041087  1.041943  0.015164   2.710  0.00674 ** 
AgeGr45-49         0.086009  1.089816  0.015146   5.679 1.36e-08 ***
AgeGr50-54        -0.069924  0.932464  0.016911  -4.135 3.55e-05 ***
AgeGr55-59        -0.153410  0.857778  0.017621  -8.706  < 2e-16 ***
AgeGr60-64        -0.476598  0.620892  0.020186 -23.610  < 2e-16 ***
AgeGr65-69        -0.556812  0.573033  0.020979 -26.541  < 2e-16 ***
AgeGr70-74        -0.576705  0.561746  0.023288 -24.764  < 2e-16 ***
AgeGr75-79        -0.411858  0.662418  0.027605 -14.920  < 2e-16 ***
AgeGr80+          -0.424664  0.653989  0.025603 -16.587  < 2e-16 ***
SexZ               0.118168  1.125433  0.006716  17.596  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2    0.35410     2.8240   0.28819   0.43509
VaccStatusAfull3    0.55102     1.8148   0.52426   0.57915
VaccStatusJfull1    0.40295     2.4817   0.37747   0.43015
VaccStatusJfull2    0.42675     2.3433   0.39134   0.46535
VaccStatusJfull3    0.46693     2.1417   0.43503   0.50116
VaccStatusMboost1   0.07805    12.8116   0.06883   0.08852
VaccStatusMboost2   0.08994    11.1189   0.04677   0.17293
VaccStatusMfull1    0.29547     3.3844   0.24397   0.35785
VaccStatusMfull2    0.24822     4.0287   0.20909   0.29467
VaccStatusMfull3    0.32734     3.0549   0.30959   0.34612
VaccStatusMpart1    0.32509     3.0760   0.26867   0.39337
VaccStatusMpart2    0.33028     3.0277   0.16516   0.66048
VaccStatusPboost1   0.10055     9.9457   0.09597   0.10534
VaccStatusPboost2   0.20099     4.9753   0.17822   0.22668
VaccStatusPfull1    0.18301     5.4643   0.17060   0.19631
VaccStatusPfull2    0.30252     3.3056   0.29232   0.31307
VaccStatusPfull3    0.46189     2.1650   0.45395   0.46997
VaccStatusPpart1    0.33558     2.9799   0.31477   0.35776
VaccStatusPpart2    0.39680     2.5202   0.31819   0.49482
InfPriorinf1        0.05226    19.1359   0.04191   0.06517
InfPriorinf2        0.08500    11.7653   0.07737   0.09337
InfPriorinf3        0.14858     6.7303   0.14085   0.15674
InfPriorinf4+       0.22591     4.4266   0.20795   0.24541
AgeGr0-11           0.57347     1.7438   0.55817   0.58918
AgeGr12-15          1.09722     0.9114   1.06085   1.13484
AgeGr16-17          1.11345     0.8981   1.06086   1.16866
AgeGr18-24          0.87051     1.1488   0.84170   0.90030
AgeGr25-29          0.76950     1.2996   0.74381   0.79607
AgeGr30-34          0.91422     1.0938   0.88636   0.94294
AgeGr35-39          1.04194     0.9597   1.01143   1.07337
AgeGr45-49          1.08982     0.9176   1.05794   1.12265
AgeGr50-54          0.93246     1.0724   0.90206   0.96389
AgeGr55-59          0.85778     1.1658   0.82866   0.88792
AgeGr60-64          0.62089     1.6106   0.59681   0.64595
AgeGr65-69          0.57303     1.7451   0.54995   0.59709
AgeGr70-74          0.56175     1.7802   0.53668   0.58798
AgeGr75-79          0.66242     1.5096   0.62753   0.69925
AgeGr80+            0.65399     1.5291   0.62198   0.68764
SexZ                1.12543     0.8885   1.11072   1.14034

Concordance= 0.718  (se = 0.001 )
Likelihood ratio test= 57415  on 39 df,   p=<2e-16
Wald test            = 38399  on 39 df,   p=<2e-16
Score (logrank) test = 49355  on 39 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 12.46667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
