
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IDeltaDetail.csv"              
[2] "VI"                                      
[3] "outputs/IDeltaDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 21:27:20."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IDeltaDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 18087116, number of events= 89461 

                       coef exp(coef)  se(coef)       z Pr(>|z|)    
VaccStatusAfull2  -1.037537  0.354326  0.105088  -9.873  < 2e-16 ***
VaccStatusAfull3  -0.595105  0.551505  0.025405 -23.425  < 2e-16 ***
VaccStatusJfull1  -0.908640  0.403072  0.033325 -27.266  < 2e-16 ***
VaccStatusJfull2  -0.851170  0.426915  0.044187 -19.263  < 2e-16 ***
VaccStatusJfull3  -0.761100  0.467152  0.036101 -21.082  < 2e-16 ***
VaccStatusMboost1 -2.549491  0.078121  0.064176 -39.726  < 2e-16 ***
VaccStatusMboost2 -2.407326  0.090056  0.333567  -7.217 5.32e-13 ***
VaccStatusMfull1  -1.218813  0.295581  0.097722 -12.472  < 2e-16 ***
VaccStatusMfull2  -1.393107  0.248303  0.087524 -15.917  < 2e-16 ***
VaccStatusMfull3  -1.117034  0.327249  0.028465 -39.242  < 2e-16 ***
VaccStatusMpart1  -1.123449  0.325156  0.097263 -11.551  < 2e-16 ***
VaccStatusMpart2  -1.107617  0.330345  0.353593  -3.132  0.00173 ** 
VaccStatusPboost1 -2.296796  0.100581  0.023756 -96.683  < 2e-16 ***
VaccStatusPboost2 -1.607143  0.200459  0.061471 -26.145  < 2e-16 ***
VaccStatusPfull1  -1.697927  0.183063  0.035802 -47.426  < 2e-16 ***
VaccStatusPfull2  -1.195397  0.302584  0.017500 -68.309  < 2e-16 ***
VaccStatusPfull3  -0.772175  0.462007  0.008846 -87.287  < 2e-16 ***
VaccStatusPpart1  -1.091775  0.335620  0.032658 -33.430  < 2e-16 ***
VaccStatusPpart2  -0.924225  0.396839  0.112641  -8.205 2.30e-16 ***
InfPriorinf1      -2.951369  0.052268  0.112637 -26.203  < 2e-16 ***
InfPriorinf2      -2.467334  0.084811  0.048004 -51.398  < 2e-16 ***
InfPriorinf3      -1.912827  0.147662  0.027371 -69.885  < 2e-16 ***
InfPriorinf4+     -1.488660  0.225675  0.042300 -35.193  < 2e-16 ***
AgeGr0-11         -0.555943  0.573531  0.013795 -40.300  < 2e-16 ***
AgeGr12-15         0.092841  1.097287  0.017198   5.398 6.73e-08 ***
AgeGr16-17         0.107502  1.113494  0.024689   4.354 1.33e-05 ***
AgeGr18-24        -0.138657  0.870527  0.017171  -8.075 6.74e-16 ***
AgeGr25-29        -0.261945  0.769553  0.017324 -15.121  < 2e-16 ***
AgeGr30-34        -0.089659  0.914243  0.015785  -5.680 1.35e-08 ***
AgeGr35-39         0.041106  1.041962  0.015164   2.711  0.00671 ** 
AgeGr45-49         0.085847  1.089639  0.015147   5.668 1.45e-08 ***
AgeGr50-54        -0.070315  0.932100  0.016913  -4.157 3.22e-05 ***
AgeGr55-59        -0.153865  0.857388  0.017624  -8.731  < 2e-16 ***
AgeGr60-64        -0.477004  0.620640  0.020188 -23.628  < 2e-16 ***
AgeGr65-69        -0.557323  0.572740  0.020982 -26.562  < 2e-16 ***
AgeGr70-74        -0.577011  0.561574  0.023288 -24.777  < 2e-16 ***
AgeGr75-79        -0.414025  0.660984  0.027625 -14.987  < 2e-16 ***
AgeGr80+          -0.425727  0.653295  0.025607 -16.625  < 2e-16 ***
SexZ               0.118290  1.125571  0.006716  17.613  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2    0.35433     2.8223   0.28837   0.43537
VaccStatusAfull3    0.55150     1.8132   0.52472   0.57966
VaccStatusJfull1    0.40307     2.4809   0.37759   0.43028
VaccStatusJfull2    0.42692     2.3424   0.39150   0.46554
VaccStatusJfull3    0.46715     2.1406   0.43524   0.50140
VaccStatusMboost1   0.07812    12.8006   0.06889   0.08859
VaccStatusMboost2   0.09006    11.1042   0.04684   0.17316
VaccStatusMfull1    0.29558     3.3832   0.24406   0.35798
VaccStatusMfull2    0.24830     4.0273   0.20916   0.29477
VaccStatusMfull3    0.32725     3.0558   0.30949   0.34603
VaccStatusMpart1    0.32516     3.0754   0.26872   0.39344
VaccStatusMpart2    0.33035     3.0271   0.16519   0.66061
VaccStatusPboost1   0.10058     9.9423   0.09600   0.10537
VaccStatusPboost2   0.20046     4.9885   0.17771   0.22613
VaccStatusPfull1    0.18306     5.4626   0.17066   0.19637
VaccStatusPfull2    0.30258     3.3049   0.29238   0.31314
VaccStatusPfull3    0.46201     2.1645   0.45407   0.47009
VaccStatusPpart1    0.33562     2.9796   0.31481   0.35781
VaccStatusPpart2    0.39684     2.5199   0.31822   0.49487
InfPriorinf1        0.05227    19.1321   0.04191   0.06518
InfPriorinf2        0.08481    11.7910   0.07719   0.09318
InfPriorinf3        0.14766     6.7722   0.13995   0.15580
InfPriorinf4+       0.22567     4.4312   0.20772   0.24518
AgeGr0-11           0.57353     1.7436   0.55823   0.58925
AgeGr12-15          1.09729     0.9113   1.06092   1.13490
AgeGr16-17          1.11349     0.8981   1.06090   1.16870
AgeGr18-24          0.87053     1.1487   0.84172   0.90032
AgeGr25-29          0.76955     1.2995   0.74386   0.79613
AgeGr30-34          0.91424     1.0938   0.88639   0.94297
AgeGr35-39          1.04196     0.9597   1.01145   1.07339
AgeGr45-49          1.08964     0.9177   1.05777   1.12247
AgeGr50-54          0.93210     1.0728   0.90171   0.96352
AgeGr55-59          0.85739     1.1663   0.82828   0.88752
AgeGr60-64          0.62064     1.6112   0.59656   0.64569
AgeGr65-69          0.57274     1.7460   0.54966   0.59678
AgeGr70-74          0.56157     1.7807   0.53652   0.58780
AgeGr75-79          0.66098     1.5129   0.62615   0.69776
AgeGr80+            0.65329     1.5307   0.62132   0.68692
SexZ                1.12557     0.8884   1.11085   1.14048

Concordance= 0.718  (se = 0.001 )
Likelihood ratio test= 57444  on 39 df,   p=<2e-16
Wald test            = 38393  on 39 df,   p=<2e-16
Score (logrank) test = 49364  on 39 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 12.5 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
