
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HOmicronInteractions.csv"              
[2] "VHI"                                             
[3] "outputs/HOmicronInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 23:53:52."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HOmicronInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ Immunity + AgeGr + 
    Sex, data = mtab)

  n= 16634856, number of events= 2048 

                           coef exp(coef)  se(coef)       z Pr(>|z|)    
Immunityboost2-_alone -1.988493  0.136902  0.074999 -26.513  < 2e-16 ***
Immunityboost2+_alone -1.556508  0.210871  0.088488 -17.590  < 2e-16 ***
Immunityfull2-_alone  -0.600405  0.548589  0.127442  -4.711 2.46e-06 ***
Immunityfull2+_alone  -0.345675  0.707743  0.056987  -6.066 1.31e-09 ***
Immunityfull2+_inf6-  -2.866506  0.056897  0.708291  -4.047 5.19e-05 ***
Immunityinf6-_alone   -1.309812  0.269871  0.261134  -5.016 5.28e-07 ***
Immunityinf6-_boost2+ -1.236833  0.290302  1.001012  -1.236  0.21661    
Immunityinf6-_full2+  -2.644392  0.071049  1.000826  -2.642  0.00824 ** 
Immunityinf6+_alone   -1.079271  0.339843  0.153242  -7.043 1.88e-12 ***
Immunityinf6+_boost2- -2.947779  0.052456  0.291421 -10.115  < 2e-16 ***
Immunityinf6+_boost2+ -2.283434  0.101934  0.410614  -5.561 2.68e-08 ***
Immunityinf6+_full2-  -2.900496  0.054996  0.708174  -4.096 4.21e-05 ***
Immunityinf6+_full2+  -1.322822  0.266383  0.151059  -8.757  < 2e-16 ***
Immunitypart_alone    -0.498135  0.607663  0.245234  -2.031  0.04223 *  
AgeGr0-11             -0.066851  0.935334  0.147283  -0.454  0.64990    
AgeGr12-15            -0.236253  0.789581  0.214637  -1.101  0.27102    
AgeGr16-17             0.345441  1.412613  0.241424   1.431  0.15247    
AgeGr18-24             0.428450  1.534877  0.162952   2.629  0.00856 ** 
AgeGr25-29            -0.063743  0.938246  0.184264  -0.346  0.72939    
AgeGr30-34            -0.008775  0.991263  0.176383  -0.050  0.96032    
AgeGr35-39             0.041691  1.042572  0.174170   0.239  0.81082    
AgeGr45-49             0.228089  1.256197  0.169202   1.348  0.17765    
AgeGr50-54             0.497811  1.645116  0.168626   2.952  0.00316 ** 
AgeGr55-59             0.858576  2.359797  0.158266   5.425 5.80e-08 ***
AgeGr60-64             0.992774  2.698710  0.157383   6.308 2.83e-10 ***
AgeGr65-69             1.590765  4.907502  0.143903  11.054  < 2e-16 ***
AgeGr70-74             1.978187  7.229624  0.140448  14.085  < 2e-16 ***
AgeGr75-79             2.732969 15.378479  0.137485  19.878  < 2e-16 ***
AgeGr80+               3.193335 24.369576  0.130862  24.402  < 2e-16 ***
SexZ                  -0.258540  0.772178  0.044907  -5.757 8.55e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone   0.13690    7.30452  0.118187   0.15858
Immunityboost2+_alone   0.21087    4.74223  0.177295   0.25081
Immunityfull2-_alone    0.54859    1.82286  0.427335   0.70425
Immunityfull2+_alone    0.70774    1.41294  0.632948   0.79138
Immunityfull2+_inf6-    0.05690   17.57551  0.014197   0.22803
Immunityinf6-_alone     0.26987    3.70548  0.161763   0.45023
Immunityinf6-_boost2+   0.29030    3.44469  0.040812   2.06497
Immunityinf6-_full2+    0.07105   14.07488  0.009992   0.50520
Immunityinf6+_alone     0.33984    2.94253  0.251674   0.45890
Immunityinf6+_boost2-   0.05246   19.06356  0.029630   0.09287
Immunityinf6+_boost2+   0.10193    9.81031  0.045583   0.22795
Immunityinf6+_full2-    0.05500   18.18317  0.013726   0.22036
Immunityinf6+_full2+    0.26638    3.75400  0.198118   0.35817
Immunitypart_alone      0.60766    1.64565  0.375768   0.98267
AgeGr0-11               0.93533    1.06914  0.700808   1.24835
AgeGr12-15              0.78958    1.26649  0.518438   1.20253
AgeGr16-17              1.41261    0.70791  0.880080   2.26738
AgeGr18-24              1.53488    0.65152  1.115240   2.11241
AgeGr25-29              0.93825    1.06582  0.653839   1.34637
AgeGr30-34              0.99126    1.00881  0.701539   1.40064
AgeGr35-39              1.04257    0.95917  0.741058   1.46676
AgeGr45-49              1.25620    0.79605  0.901639   1.75018
AgeGr50-54              1.64512    0.60786  1.182121   2.28945
AgeGr55-59              2.35980    0.42377  1.730448   3.21803
AgeGr60-64              2.69871    0.37055  1.982401   3.67385
AgeGr65-69              4.90750    0.20377  3.701433   6.50655
AgeGr70-74              7.22962    0.13832  5.489927   9.52061
AgeGr75-79             15.37848    0.06503 11.745900  20.13448
AgeGr80+               24.36958    0.04103 18.856358  31.49475
SexZ                    0.77218    1.29504  0.707119   0.84322

Concordance= 0.778  (se = 0.006 )
Likelihood ratio test= 2909  on 30 df,   p=<2e-16
Wald test            = 3276  on 30 df,   p=<2e-16
Score (logrank) test = 4184  on 30 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 8.266667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
