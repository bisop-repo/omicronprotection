
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/ODeltaDetail.csv"              
[2] "VO"                                      
[3] "outputs/ODeltaDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-02 20:26:16."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/ODeltaDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantOxygen) ~ VaccStatus + InfPrior  + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantOxygen) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16688526, number of events= 2926 
   (23 observations deleted due to missingness)

                        coef  exp(coef)   se(coef)       z Pr(>|z|)    
VaccStatusAfull2  -1.644e+00  1.933e-01  3.791e-01  -4.335 1.46e-05 ***
VaccStatusAfull3  -1.237e+00  2.903e-01  6.973e-02 -17.738  < 2e-16 ***
VaccStatusJfull1  -1.069e+00  3.434e-01  1.941e-01  -5.507 3.65e-08 ***
VaccStatusJfull2  -1.220e+00  2.952e-01  2.437e-01  -5.006 5.57e-07 ***
VaccStatusJfull3  -8.926e-01  4.096e-01  1.292e-01  -6.908 4.90e-12 ***
VaccStatusMboost1 -3.841e+00  2.147e-02  2.372e-01 -16.192  < 2e-16 ***
VaccStatusMboost2 -3.695e+00  2.484e-02  1.001e+00  -3.692 0.000223 ***
VaccStatusMfull1  -1.791e+01  1.670e-08  1.944e+03  -0.009 0.992648    
VaccStatusMfull2  -1.634e+00  1.951e-01  5.006e-01  -3.265 0.001095 ** 
VaccStatusMfull3  -1.968e+00  1.398e-01  1.421e-01 -13.845  < 2e-16 ***
VaccStatusMpart1  -6.133e-01  5.416e-01  3.171e-01  -1.934 0.053103 .  
VaccStatusMpart2  -1.817e+01  1.282e-08  7.806e+03  -0.002 0.998142    
VaccStatusPboost1 -3.888e+00  2.048e-02  9.971e-02 -38.995  < 2e-16 ***
VaccStatusPboost2 -3.541e+00  2.900e-02  2.700e-01 -13.113  < 2e-16 ***
VaccStatusPfull1  -2.290e+00  1.012e-01  2.684e-01  -8.534  < 2e-16 ***
VaccStatusPfull2  -2.194e+00  1.115e-01  2.058e-01 -10.659  < 2e-16 ***
VaccStatusPfull3  -1.946e+00  1.429e-01  5.895e-02 -33.006  < 2e-16 ***
VaccStatusPpart1  -9.569e-01  3.841e-01  1.618e-01  -5.912 3.37e-09 ***
VaccStatusPpart2  -1.791e+01  1.666e-08  3.467e+03  -0.005 0.995878    
InfPriorinf1      -1.735e+01  2.924e-08  1.016e+03  -0.017 0.986383    
InfPriorinf2      -1.693e+01  4.447e-08  3.911e+02  -0.043 0.965478    
InfPriorinf3      -5.509e+00  4.051e-03  1.000e+00  -5.508 3.64e-08 ***
InfPriorinf4+     -1.596e+01  1.170e-07  3.800e+02  -0.042 0.966495    
AgeGr0-11         -3.260e+00  3.840e-02  3.093e-01 -10.541  < 2e-16 ***
AgeGr12-15        -2.010e+01  1.867e-09  3.088e+03  -0.007 0.994807    
AgeGr16-17        -1.956e+01  3.191e-09  4.271e+03  -0.005 0.996345    
AgeGr18-24        -1.396e+00  2.475e-01  2.894e-01  -4.826 1.40e-06 ***
AgeGr25-29        -1.391e+00  2.487e-01  2.665e-01  -5.220 1.79e-07 ***
AgeGr30-34        -7.757e-01  4.604e-01  2.019e-01  -3.841 0.000122 ***
AgeGr35-39        -2.677e-01  7.651e-01  1.716e-01  -1.560 0.118649    
AgeGr45-49         6.429e-01  1.902e+00  1.444e-01   4.454 8.44e-06 ***
AgeGr50-54         1.096e+00  2.993e+00  1.384e-01   7.919 2.39e-15 ***
AgeGr55-59         1.356e+00  3.883e+00  1.335e-01  10.159  < 2e-16 ***
AgeGr60-64         1.598e+00  4.945e+00  1.294e-01  12.348  < 2e-16 ***
AgeGr65-69         2.257e+00  9.558e+00  1.218e-01  18.531  < 2e-16 ***
AgeGr70-74         2.715e+00  1.510e+01  1.202e-01  22.579  < 2e-16 ***
AgeGr75-79         3.314e+00  2.749e+01  1.217e-01  27.223  < 2e-16 ***
AgeGr80+           3.604e+00  3.673e+01  1.170e-01  30.795  < 2e-16 ***
SexZ              -3.589e-01  6.984e-01  3.766e-02  -9.530  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2  1.933e-01  5.174e+00 9.192e-02   0.40633
VaccStatusAfull3  2.903e-01  3.445e+00 2.532e-01   0.33280
VaccStatusJfull1  3.434e-01  2.912e+00 2.347e-01   0.50234
VaccStatusJfull2  2.952e-01  3.387e+00 1.831e-01   0.47603
VaccStatusJfull3  4.096e-01  2.441e+00 3.180e-01   0.52764
VaccStatusMboost1 2.147e-02  4.657e+01 1.349e-02   0.03418
VaccStatusMboost2 2.484e-02  4.026e+01 3.492e-03   0.17665
VaccStatusMfull1  1.670e-08  5.988e+07 0.000e+00       Inf
VaccStatusMfull2  1.951e-01  5.126e+00 7.315e-02   0.52040
VaccStatusMfull3  1.398e-01  7.154e+00 1.058e-01   0.18468
VaccStatusMpart1  5.416e-01  1.846e+00 2.909e-01   1.00824
VaccStatusMpart2  1.282e-08  7.803e+07 0.000e+00       Inf
VaccStatusPboost1 2.048e-02  4.883e+01 1.684e-02   0.02490
VaccStatusPboost2 2.900e-02  3.449e+01 1.708e-02   0.04922
VaccStatusPfull1  1.012e-01  9.877e+00 5.983e-02   0.17133
VaccStatusPfull2  1.115e-01  8.967e+00 7.450e-02   0.16692
VaccStatusPfull3  1.429e-01  6.998e+00 1.273e-01   0.16040
VaccStatusPpart1  3.841e-01  2.604e+00 2.797e-01   0.52746
VaccStatusPpart2  1.666e-08  6.002e+07 0.000e+00       Inf
InfPriorinf1      2.924e-08  3.420e+07 0.000e+00       Inf
InfPriorinf2      4.447e-08  2.249e+07 0.000e+00       Inf
InfPriorinf3      4.051e-03  2.468e+02 5.704e-04   0.02877
InfPriorinf4+     1.170e-07  8.549e+06 0.000e+00       Inf
AgeGr0-11         3.840e-02  2.604e+01 2.094e-02   0.07039
AgeGr12-15        1.867e-09  5.356e+08 0.000e+00       Inf
AgeGr16-17        3.191e-09  3.134e+08 0.000e+00       Inf
AgeGr18-24        2.475e-01  4.041e+00 1.404e-01   0.43639
AgeGr25-29        2.487e-01  4.021e+00 1.475e-01   0.41936
AgeGr30-34        4.604e-01  2.172e+00 3.099e-01   0.68390
AgeGr35-39        7.651e-01  1.307e+00 5.466e-01   1.07095
AgeGr45-49        1.902e+00  5.258e-01 1.433e+00   2.52390
AgeGr50-54        2.993e+00  3.342e-01 2.282e+00   3.92519
AgeGr55-59        3.883e+00  2.576e-01 2.989e+00   5.04397
AgeGr60-64        4.945e+00  2.022e-01 3.837e+00   6.37305
AgeGr65-69        9.558e+00  1.046e-01 7.528e+00  12.13489
AgeGr70-74        1.510e+01  6.624e-02 1.193e+01  19.10876
AgeGr75-79        2.749e+01  3.637e-02 2.166e+01  34.90321
AgeGr80+          3.673e+01  2.723e-02 2.920e+01  46.19595
SexZ              6.984e-01  1.432e+00 6.487e-01   0.75195

Concordance= 0.925  (se = 0.002 )
Likelihood ratio test= 10043  on 39 df,   p=<2e-16
Wald test            = 6836  on 39 df,   p=<2e-16
Score (logrank) test = 13493  on 39 df,   p=<2e-16

