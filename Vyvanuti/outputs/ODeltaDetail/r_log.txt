
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/ODeltaDetail.csv"              
[2] "VO"                                      
[3] "outputs/ODeltaDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 22:03:30."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/ODeltaDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantOxygen) ~ VaccStatus + InfPrior  + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantOxygen) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16688161, number of events= 2940 
   (23 observations deleted due to missingness)

                        coef  exp(coef)   se(coef)       z Pr(>|z|)    
VaccStatusAfull2  -1.645e+00  1.929e-01  3.791e-01  -4.340 1.42e-05 ***
VaccStatusAfull3  -1.234e+00  2.910e-01  6.972e-02 -17.704  < 2e-16 ***
VaccStatusJfull1  -1.040e+00  3.536e-01  1.907e-01  -5.452 4.97e-08 ***
VaccStatusJfull2  -1.228e+00  2.928e-01  2.437e-01  -5.040 4.66e-07 ***
VaccStatusJfull3  -8.954e-01  4.084e-01  1.292e-01  -6.931 4.18e-12 ***
VaccStatusMboost1 -3.839e+00  2.152e-02  2.372e-01 -16.184  < 2e-16 ***
VaccStatusMboost2 -3.693e+00  2.490e-02  1.001e+00  -3.690 0.000225 ***
VaccStatusMfull1  -2.772e+00  6.251e-02  1.000e+00  -2.772 0.005579 ** 
VaccStatusMfull2  -1.646e+00  1.928e-01  5.006e-01  -3.288 0.001009 ** 
VaccStatusMfull3  -1.969e+00  1.396e-01  1.421e-01 -13.856  < 2e-16 ***
VaccStatusMpart1  -6.103e-01  5.432e-01  3.171e-01  -1.925 0.054256 .  
VaccStatusMpart2  -1.615e+01  9.702e-08  2.841e+03  -0.006 0.995464    
VaccStatusPboost1 -3.859e+00  2.109e-02  9.844e-02 -39.197  < 2e-16 ***
VaccStatusPboost2 -3.537e+00  2.909e-02  2.700e-01 -13.101  < 2e-16 ***
VaccStatusPfull1  -2.301e+00  1.001e-01  2.684e-01  -8.574  < 2e-16 ***
VaccStatusPfull2  -2.211e+00  1.096e-01  2.058e-01 -10.742  < 2e-16 ***
VaccStatusPfull3  -1.941e+00  1.436e-01  5.872e-02 -33.046  < 2e-16 ***
VaccStatusPpart1  -9.546e-01  3.850e-01  1.618e-01  -5.899 3.67e-09 ***
VaccStatusPpart2  -1.589e+01  1.252e-07  1.265e+03  -0.013 0.989973    
InfPriorinf1      -1.534e+01  2.185e-07  3.718e+02  -0.041 0.967099    
InfPriorinf2      -3.603e+00  2.724e-02  5.006e-01  -7.197 6.14e-13 ***
InfPriorinf3      -3.205e+00  4.056e-02  3.168e-01 -10.115  < 2e-16 ***
InfPriorinf4+     -4.080e+00  1.692e-02  1.000e+00  -4.079 4.53e-05 ***
AgeGr0-11         -3.268e+00  3.807e-02  3.090e-01 -10.576  < 2e-16 ***
AgeGr12-15        -1.807e+01  1.419e-08  1.115e+03  -0.016 0.987066    
AgeGr16-17        -1.754e+01  2.421e-08  1.543e+03  -0.011 0.990932    
AgeGr18-24        -1.340e+00  2.619e-01  2.808e-01  -4.773 1.82e-06 ***
AgeGr25-29        -1.403e+00  2.458e-01  2.663e-01  -5.270 1.36e-07 ***
AgeGr30-34        -7.876e-01  4.549e-01  2.016e-01  -3.907 9.33e-05 ***
AgeGr35-39        -2.625e-01  7.691e-01  1.703e-01  -1.542 0.123181    
AgeGr45-49         6.365e-01  1.890e+00  1.436e-01   4.433 9.30e-06 ***
AgeGr50-54         1.088e+00  2.970e+00  1.377e-01   7.904 2.70e-15 ***
AgeGr55-59         1.359e+00  3.893e+00  1.326e-01  10.248  < 2e-16 ***
AgeGr60-64         1.596e+00  4.932e+00  1.287e-01  12.398  < 2e-16 ***
AgeGr65-69         2.249e+00  9.478e+00  1.212e-01  18.559  < 2e-16 ***
AgeGr70-74         2.705e+00  1.496e+01  1.196e-01  22.620  < 2e-16 ***
AgeGr75-79         3.300e+00  2.712e+01  1.211e-01  27.247  < 2e-16 ***
AgeGr80+           3.594e+00  3.637e+01  1.164e-01  30.882  < 2e-16 ***
SexZ              -3.575e-01  6.994e-01  3.757e-02  -9.516  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef)  lower .95 upper .95
VaccStatusAfull2  1.929e-01  5.184e+00  9.176e-02   0.40560
VaccStatusAfull3  2.910e-01  3.436e+00  2.539e-01   0.33366
VaccStatusJfull1  3.536e-01  2.828e+00  2.433e-01   0.51381
VaccStatusJfull2  2.928e-01  3.416e+00  1.816e-01   0.47204
VaccStatusJfull3  4.084e-01  2.448e+00  3.171e-01   0.52613
VaccStatusMboost1 2.152e-02  4.648e+01  1.352e-02   0.03425
VaccStatusMboost2 2.490e-02  4.016e+01  3.501e-03   0.17707
VaccStatusMfull1  6.251e-02  1.600e+01  8.801e-03   0.44404
VaccStatusMfull2  1.928e-01  5.185e+00  7.230e-02   0.51440
VaccStatusMfull3  1.396e-01  7.164e+00  1.057e-01   0.18442
VaccStatusMpart1  5.432e-01  1.841e+00  2.918e-01   1.01122
VaccStatusMpart2  9.702e-08  1.031e+07  0.000e+00       Inf
VaccStatusPboost1 2.109e-02  4.741e+01  1.739e-02   0.02558
VaccStatusPboost2 2.909e-02  3.437e+01  1.714e-02   0.04939
VaccStatusPfull1  1.001e-01  9.986e+00  5.918e-02   0.16946
VaccStatusPfull2  1.096e-01  9.126e+00  7.320e-02   0.16403
VaccStatusPfull3  1.436e-01  6.962e+00  1.280e-01   0.16115
VaccStatusPpart1  3.850e-01  2.598e+00  2.803e-01   0.52865
VaccStatusPpart2  1.252e-07  7.985e+06  0.000e+00       Inf
InfPriorinf1      2.185e-07  4.577e+06 4.941e-324       Inf
InfPriorinf2      2.724e-02  3.671e+01  1.021e-02   0.07267
InfPriorinf3      4.056e-02  2.466e+01  2.180e-02   0.07547
InfPriorinf4+     1.692e-02  5.912e+01  2.382e-03   0.12014
AgeGr0-11         3.807e-02  2.627e+01  2.078e-02   0.06976
AgeGr12-15        1.419e-08  7.045e+07  0.000e+00       Inf
AgeGr16-17        2.421e-08  4.130e+07  0.000e+00       Inf
AgeGr18-24        2.619e-01  3.819e+00  1.510e-01   0.45399
AgeGr25-29        2.458e-01  4.069e+00  1.459e-01   0.41419
AgeGr30-34        4.549e-01  2.198e+00  3.064e-01   0.67532
AgeGr35-39        7.691e-01  1.300e+00  5.508e-01   1.07385
AgeGr45-49        1.890e+00  5.291e-01  1.426e+00   2.50409
AgeGr50-54        2.970e+00  3.367e-01  2.267e+00   3.88977
AgeGr55-59        3.893e+00  2.569e-01  3.002e+00   5.04861
AgeGr60-64        4.932e+00  2.027e-01  3.832e+00   6.34754
AgeGr65-69        9.478e+00  1.055e-01  7.475e+00  12.01957
AgeGr70-74        1.496e+01  6.685e-02  1.183e+01  18.90893
AgeGr75-79        2.712e+01  3.687e-02  2.139e+01  34.38883
AgeGr80+          3.637e+01  2.749e-02  2.895e+01  45.68894
SexZ              6.994e-01  1.430e+00  6.498e-01   0.75287

Concordance= 0.921  (se = 0.002 )
Likelihood ratio test= 9916  on 39 df,   p=<2e-16
Wald test            = 7020  on 39 df,   p=<2e-16
Score (logrank) test = 13442  on 39 df,   p=<2e-16

