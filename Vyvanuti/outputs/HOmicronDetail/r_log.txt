
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HOmicronDetail.csv"              
[2] "VH"                                        
[3] "outputs/HOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-02-23 01:28:01."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~  VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab, cluster = Subject)

  n= 16688549, number of events= 1969 

                      coef exp(coef) se(coef) robust se       z Pr(>|z|)    
VaccStatusAfull2   0.87393   2.39631  0.70843   0.70858   1.233 0.217442    
VaccStatusAfull3  -0.13445   0.87420  0.10736   0.10798  -1.245 0.213072    
VaccStatusJfull1  -0.31815   0.72749  0.26157   0.26255  -1.212 0.225593    
VaccStatusJfull2  -0.49795   0.60778  0.29152   0.29193  -1.706 0.088060 .  
VaccStatusJfull3  -0.46639   0.62726  0.19634   0.19647  -2.374 0.017602 *  
VaccStatusMboost1 -2.18304   0.11270  0.17904   0.17922 -12.181  < 2e-16 ***
VaccStatusMboost2 -1.79095   0.16680  0.27125   0.27223  -6.579 4.75e-11 ***
VaccStatusMfull1  -0.70135   0.49591  0.44886   0.44914  -1.562 0.118395    
VaccStatusMfull2  -0.48186   0.61764  0.57865   0.57837  -0.833 0.404768    
VaccStatusMfull3  -0.37868   0.68477  0.14674   0.14654  -2.584 0.009763 ** 
VaccStatusMpart1  -0.81014   0.44480  0.70817   0.70786  -1.144 0.252416    
VaccStatusMpart2   0.95784   2.60606  1.00077   0.99796   0.960 0.337159    
VaccStatusPboost1 -1.96571   0.14006  0.07827   0.07914 -24.838  < 2e-16 ***
VaccStatusPboost2 -1.53215   0.21607  0.09088   0.09137 -16.768  < 2e-16 ***
VaccStatusPfull1  -0.61241   0.54204  0.14415   0.14491  -4.226 2.38e-05 ***
VaccStatusPfull2   0.10337   1.10890  0.15711   0.15867   0.651 0.514733    
VaccStatusPfull3  -0.40601   0.66630  0.06617   0.06705  -6.055 1.40e-09 ***
VaccStatusPpart1  -0.52234   0.59313  0.27968   0.27984  -1.867 0.061963 .  
VaccStatusPpart2  -0.03424   0.96634  0.70826   0.70841  -0.048 0.961448    
InfPriorinf1      -2.11501   0.12063  0.30288   0.30337  -6.972 3.13e-12 ***
InfPriorinf2      -3.72678   0.02407  1.00057   1.00088  -3.724 0.000196 ***
InfPriorinf3      -2.12277   0.11970  0.20576   0.20594 -10.308  < 2e-16 ***
InfPriorinf4+     -2.12042   0.11998  0.31720   0.31734  -6.682 2.36e-11 ***
AgeGr0-11          0.01327   1.01336  0.15559   0.15404   0.086 0.931365    
AgeGr12-15        -0.27135   0.76235  0.23045   0.23130  -1.173 0.240740    
AgeGr16-17         0.31923   1.37607  0.25951   0.25991   1.228 0.219352    
AgeGr18-24         0.44598   1.56202  0.17395   0.17466   2.553 0.010669 *  
AgeGr25-29        -0.07916   0.92389  0.19800   0.19790  -0.400 0.689161    
AgeGr30-34         0.07117   1.07377  0.18496   0.18470   0.385 0.699991    
AgeGr35-39         0.09453   1.09914  0.18413   0.18397   0.514 0.607369    
AgeGr45-49         0.28345   1.32770  0.17992   0.18048   1.570 0.116300    
AgeGr50-54         0.59574   1.81437  0.17741   0.17768   3.353 0.000800 ***
AgeGr55-59         0.98544   2.67900  0.16588   0.16611   5.932 2.99e-09 ***
AgeGr60-64         1.07807   2.93901  0.16571   0.16570   6.506 7.71e-11 ***
AgeGr65-69         1.70674   5.51098  0.15161   0.15192  11.234  < 2e-16 ***
AgeGr70-74         2.06121   7.85545  0.14902   0.14986  13.754  < 2e-16 ***
AgeGr75-79         2.81152  16.63521  0.14653   0.14810  18.984  < 2e-16 ***
AgeGr80+           3.27831  26.53077  0.13996   0.14020  23.383  < 2e-16 ***
SexZ              -0.28416   0.75265  0.04582   0.04689  -6.060 1.36e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2    2.39631    0.41731  0.597587    9.6091
VaccStatusAfull3    0.87420    1.14390  0.707460    1.0802
VaccStatusJfull1    0.72749    1.37458  0.434859    1.2171
VaccStatusJfull2    0.60778    1.64534  0.342970    1.0770
VaccStatusJfull3    0.62726    1.59424  0.426790    0.9219
VaccStatusMboost1   0.11270    8.87324  0.079317    0.1601
VaccStatusMboost2   0.16680    5.99513  0.097831    0.2844
VaccStatusMfull1    0.49591    2.01648  0.205635    1.1960
VaccStatusMfull2    0.61764    1.61908  0.198805    1.9188
VaccStatusMfull3    0.68477    1.46035  0.513817    0.9126
VaccStatusMpart1    0.44480    2.24822  0.111079    1.7811
VaccStatusMpart2    2.60606    0.38372  0.368567   18.4269
VaccStatusPboost1   0.14006    7.14001  0.119932    0.1636
VaccStatusPboost2   0.21607    4.62812  0.180642    0.2584
VaccStatusPfull1    0.54204    1.84487  0.408023    0.7201
VaccStatusPfull2    1.10890    0.90179  0.812518    1.5134
VaccStatusPfull3    0.66630    1.50082  0.584250    0.7599
VaccStatusPpart1    0.59313    1.68597  0.342728    1.0265
VaccStatusPpart2    0.96634    1.03483  0.241063    3.8737
InfPriorinf1        0.12063    8.28964  0.066564    0.2186
InfPriorinf2        0.02407   41.54531  0.003385    0.1712
InfPriorinf3        0.11970    8.35426  0.079946    0.1792
InfPriorinf4+       0.11998    8.33465  0.064416    0.2235
AgeGr0-11           1.01336    0.98682  0.749279    1.3705
AgeGr12-15          0.76235    1.31173  0.484475    1.1996
AgeGr16-17          1.37607    0.72671  0.826813    2.2902
AgeGr18-24          1.56202    0.64020  1.109205    2.1997
AgeGr25-29          0.92389    1.08238  0.626860    1.3617
AgeGr30-34          1.07377    0.93130  0.747636    1.5422
AgeGr35-39          1.09914    0.90980  0.766409    1.5763
AgeGr45-49          1.32770    0.75318  0.932121    1.8911
AgeGr50-54          1.81437    0.55116  1.280804    2.5702
AgeGr55-59          2.67900    0.37327  1.934537    3.7100
AgeGr60-64          2.93901    0.34025  2.124014    4.0667
AgeGr65-69          5.51098    0.18146  4.091785    7.4224
AgeGr70-74          7.85545    0.12730  5.856085   10.5374
AgeGr75-79         16.63521    0.06011 12.444123   22.2378
AgeGr80+           26.53077    0.03769 20.156218   34.9213
SexZ                0.75265    1.32864  0.686567    0.8251

Concordance= 0.8  (se = 0.005 )
Likelihood ratio test= 3183  on 39 df,   p=<2e-16
Wald test            = 3261  on 39 df,   p=<2e-16
Score (logrank) test = 4414  on 39 df,   p=<2e-16,   Robust = 1431  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 18.96667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
