
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HOmicronDetail.csv"              
[2] "VH"                                        
[3] "outputs/HOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 19:33:31."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~  VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 16688184, number of events= 2055 

                       coef exp(coef)  se(coef)       z Pr(>|z|)    
VaccStatusAfull2   0.819557  2.269493  0.708387   1.157  0.24730    
VaccStatusAfull3  -0.112606  0.893503  0.105383  -1.069  0.28528    
VaccStatusJfull1  -0.385494  0.680115  0.261398  -1.475  0.14028    
VaccStatusJfull2  -0.356689  0.699990  0.261233  -1.365  0.17213    
VaccStatusJfull3  -0.440813  0.643513  0.189530  -2.326  0.02003 *  
VaccStatusMboost1 -2.172522  0.113890  0.176347 -12.320  < 2e-16 ***
VaccStatusMboost2 -1.667334  0.188750  0.254137  -6.561 5.35e-11 ***
VaccStatusMfull1  -0.773286  0.461494  0.448796  -1.723  0.08488 .  
VaccStatusMfull2  -0.583920  0.557708  0.578621  -1.009  0.31290    
VaccStatusMfull3  -0.404555  0.667274  0.145152  -2.787  0.00532 ** 
VaccStatusMpart1  -0.814396  0.442907  0.708130  -1.150  0.25012    
VaccStatusMpart2   0.953759  2.595448  1.000748   0.953  0.34057    
VaccStatusPboost1 -1.954530  0.141631  0.077008 -25.381  < 2e-16 ***
VaccStatusPboost2 -1.522203  0.218231  0.090116 -16.892  < 2e-16 ***
VaccStatusPfull1  -0.679501  0.506870  0.142664  -4.763 1.91e-06 ***
VaccStatusPfull2  -0.012402  0.987675  0.155297  -0.080  0.93635    
VaccStatusPfull3  -0.427030  0.652444  0.064444  -6.626 3.44e-11 ***
VaccStatusPpart1  -0.536649  0.584704  0.279610  -1.919  0.05495 .  
VaccStatusPpart2  -0.054317  0.947132  0.708223  -0.077  0.93887    
InfPriorinf1      -1.579708  0.206035  0.231196  -6.833 8.33e-12 ***
InfPriorinf2      -1.317959  0.267681  0.303272  -4.346 1.39e-05 ***
InfPriorinf3      -1.168779  0.310746  0.129562  -9.021  < 2e-16 ***
InfPriorinf4+     -0.738123  0.478010  0.160047  -4.612 3.99e-06 ***
AgeGr0-11         -0.079400  0.923670  0.147391  -0.539  0.59009    
AgeGr12-15        -0.259484  0.771449  0.215275  -1.205  0.22806    
AgeGr16-17         0.337651  1.401652  0.241912   1.396  0.16279    
AgeGr18-24         0.421542  1.524310  0.163085   2.585  0.00974 ** 
AgeGr25-29        -0.073073  0.929533  0.184296  -0.396  0.69174    
AgeGr30-34         0.001917  1.001919  0.175648   0.011  0.99129    
AgeGr35-39         0.038567  1.039321  0.174175   0.221  0.82476    
AgeGr45-49         0.231085  1.259966  0.169204   1.366  0.17203    
AgeGr50-54         0.499144  1.647310  0.168630   2.960  0.00308 ** 
AgeGr55-59         0.876422  2.402288  0.157627   5.560 2.70e-08 ***
AgeGr60-64         0.982755  2.671806  0.157474   6.241 4.35e-10 ***
AgeGr65-69         1.585490  4.881685  0.143890  11.019  < 2e-16 ***
AgeGr70-74         1.956918  7.077480  0.140859  13.893  < 2e-16 ***
AgeGr75-79         2.703598 14.933370  0.138213  19.561  < 2e-16 ***
AgeGr80+           3.161439 23.604537  0.131517  24.038  < 2e-16 ***
SexZ              -0.255729  0.774351  0.044839  -5.703 1.17e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2     2.2695    0.44063   0.56617    9.0972
VaccStatusAfull3     0.8935    1.11919   0.72676    1.0985
VaccStatusJfull1     0.6801    1.47034   0.40746    1.1352
VaccStatusJfull2     0.7000    1.42859   0.41950    1.1680
VaccStatusJfull3     0.6435    1.55397   0.44384    0.9330
VaccStatusMboost1    0.1139    8.78040   0.08061    0.1609
VaccStatusMboost2    0.1887    5.29802   0.11470    0.3106
VaccStatusMfull1     0.4615    2.16687   0.19149    1.1122
VaccStatusMfull2     0.5577    1.79305   0.17943    1.7335
VaccStatusMfull3     0.6673    1.49863   0.50205    0.8869
VaccStatusMpart1     0.4429    2.25781   0.11055    1.7745
VaccStatusMpart2     2.5954    0.38529   0.36507   18.4523
VaccStatusPboost1    0.1416    7.06060   0.12179    0.1647
VaccStatusPboost2    0.2182    4.58231   0.18290    0.2604
VaccStatusPfull1     0.5069    1.97289   0.38323    0.6704
VaccStatusPfull2     0.9877    1.01248   0.72849    1.3391
VaccStatusPfull3     0.6524    1.53270   0.57503    0.7403
VaccStatusPpart1     0.5847    1.71027   0.33801    1.0114
VaccStatusPpart2     0.9471    1.05582   0.23636    3.7953
InfPriorinf1         0.2060    4.85354   0.13096    0.3241
InfPriorinf2         0.2677    3.73579   0.14773    0.4850
InfPriorinf3         0.3107    3.21806   0.24106    0.4006
InfPriorinf4+        0.4780    2.09200   0.34931    0.6541
AgeGr0-11            0.9237    1.08264   0.69192    1.2330
AgeGr12-15           0.7714    1.29626   0.50590    1.1764
AgeGr16-17           1.4017    0.71344   0.87242    2.2519
AgeGr18-24           1.5243    0.65603   1.10727    2.0984
AgeGr25-29           0.9295    1.07581   0.64773    1.3339
AgeGr30-34           1.0019    0.99808   0.71010    1.4137
AgeGr35-39           1.0393    0.96217   0.73874    1.4622
AgeGr45-49           1.2600    0.79367   0.90434    1.7554
AgeGr50-54           1.6473    0.60705   1.18369    2.2925
AgeGr55-59           2.4023    0.41627   1.76381    3.2719
AgeGr60-64           2.6718    0.37428   1.96229    3.6379
AgeGr65-69           4.8817    0.20485   3.68206    6.4722
AgeGr70-74           7.0775    0.14129   5.37006    9.3278
AgeGr75-79          14.9334    0.06696  11.38966   19.5796
AgeGr80+            23.6045    0.04236  18.24097   30.5452
SexZ                 0.7744    1.29140   0.70920    0.8455

Concordance= 0.779  (se = 0.006 )
Likelihood ratio test= 2930  on 39 df,   p=<2e-16
Wald test            = 3311  on 39 df,   p=<2e-16
Score (logrank) test = 4248  on 39 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 9.933333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
