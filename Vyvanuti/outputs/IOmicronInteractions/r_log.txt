
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IOmicronInteractions.csv"              
[2] "VII"                                             
[3] "outputs/IOmicronInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-08-29 13:40:48."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IOmicronInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ Immunity + AgeGr + 
    Sex, data = mtab, robust = FALSE)

  n= 18038611, number of events= 306129 

                           coef exp(coef)  se(coef)        z Pr(>|z|)    
Immunityboost2-_alone -0.816974  0.441766  0.006855 -119.183  < 2e-16 ***
Immunityboost2+_alone -0.231981  0.792961  0.011919  -19.462  < 2e-16 ***
Immunityfull2-_alone  -0.555778  0.573626  0.009831  -56.533  < 2e-16 ***
Immunityfull2+_alone  -0.093909  0.910365  0.004766  -19.706  < 2e-16 ***
Immunityfull2+_inf6-  -2.233453  0.107158  0.062995  -35.455  < 2e-16 ***
Immunityinf6-_alone   -1.155302  0.314963  0.014676  -78.721  < 2e-16 ***
Immunityinf6-_boost2- -2.535956  0.079186  0.185732  -13.654  < 2e-16 ***
Immunityinf6-_full2-  -1.710083  0.180851  0.166705  -10.258  < 2e-16 ***
Immunityinf6-_full2+  -1.994993  0.136015  0.048921  -40.780  < 2e-16 ***
Immunityinf6+_alone   -0.133764  0.874796  0.007839  -17.063  < 2e-16 ***
Immunityinf6+_boost2- -1.358420  0.257067  0.016402  -82.820  < 2e-16 ***
Immunityinf6+_boost2+ -0.662519  0.515551  0.033103  -20.014  < 2e-16 ***
Immunityinf6+_full2-  -1.463715  0.231375  0.027296  -53.624  < 2e-16 ***
Immunityinf6+_full2+  -0.598750  0.549498  0.008985  -66.642  < 2e-16 ***
Immunitypart_alone    -0.375666  0.686832  0.019086  -19.683  < 2e-16 ***
AgeGr0-11             -0.657356  0.518219  0.008185  -80.317  < 2e-16 ***
AgeGr12-15             0.419460  1.521139  0.008498   49.358  < 2e-16 ***
AgeGr16-17             0.652550  1.920433  0.010382   62.856  < 2e-16 ***
AgeGr18-24             0.259156  1.295836  0.007931   32.674  < 2e-16 ***
AgeGr25-29            -0.072474  0.930090  0.008692   -8.338  < 2e-16 ***
AgeGr30-34            -0.014461  0.985643  0.008265   -1.750  0.08019 .  
AgeGr35-39             0.021340  1.021569  0.008154    2.617  0.00886 ** 
AgeGr45-49             0.058780  1.060542  0.007974    7.372 1.68e-13 ***
AgeGr50-54            -0.164561  0.848266  0.009060  -18.163  < 2e-16 ***
AgeGr55-59            -0.382518  0.682141  0.009860  -38.796  < 2e-16 ***
AgeGr60-64            -0.838179  0.432497  0.011950  -70.142  < 2e-16 ***
AgeGr65-69            -1.272781  0.280052  0.014110  -90.204  < 2e-16 ***
AgeGr70-74            -1.596126  0.202680  0.016660  -95.805  < 2e-16 ***
AgeGr75-79            -1.631909  0.195556  0.020037  -81.444  < 2e-16 ***
AgeGr80+              -1.716358  0.179720  0.019671  -87.254  < 2e-16 ***
SexZ                   0.115267  1.122173  0.003624   31.803  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone   0.44177     2.2636   0.43587    0.4477
Immunityboost2+_alone   0.79296     1.2611   0.77465    0.8117
Immunityfull2-_alone    0.57363     1.7433   0.56268    0.5848
Immunityfull2+_alone    0.91037     1.0985   0.90190    0.9189
Immunityfull2+_inf6-    0.10716     9.3320   0.09471    0.1212
Immunityinf6-_alone     0.31496     3.1750   0.30603    0.3242
Immunityinf6-_boost2-   0.07919    12.6285   0.05502    0.1140
Immunityinf6-_full2-    0.18085     5.5294   0.13044    0.2507
Immunityinf6-_full2+    0.13601     7.3522   0.12358    0.1497
Immunityinf6+_alone     0.87480     1.1431   0.86146    0.8883
Immunityinf6+_boost2-   0.25707     3.8900   0.24893    0.2655
Immunityinf6+_boost2+   0.51555     1.9397   0.48316    0.5501
Immunityinf6+_full2-    0.23138     4.3220   0.21932    0.2441
Immunityinf6+_full2+    0.54950     1.8198   0.53991    0.5593
Immunitypart_alone      0.68683     1.4560   0.66161    0.7130
AgeGr0-11               0.51822     1.9297   0.50997    0.5266
AgeGr12-15              1.52114     0.6574   1.49601    1.5467
AgeGr16-17              1.92043     0.5207   1.88175    1.9599
AgeGr18-24              1.29584     0.7717   1.27585    1.3161
AgeGr25-29              0.93009     1.0752   0.91438    0.9461
AgeGr30-34              0.98564     1.0146   0.96980    1.0017
AgeGr35-39              1.02157     0.9789   1.00537    1.0380
AgeGr45-49              1.06054     0.9429   1.04410    1.0772
AgeGr50-54              0.84827     1.1789   0.83334    0.8635
AgeGr55-59              0.68214     1.4660   0.66909    0.6955
AgeGr60-64              0.43250     2.3122   0.42249    0.4427
AgeGr65-69              0.28005     3.5708   0.27241    0.2879
AgeGr70-74              0.20268     4.9339   0.19617    0.2094
AgeGr75-79              0.19556     5.1136   0.18802    0.2034
AgeGr80+                0.17972     5.5642   0.17292    0.1868
SexZ                    1.12217     0.8911   1.11423    1.1302

Concordance= 0.688  (se = 0 )
Likelihood ratio test= 142098  on 31 df,   p=<2e-16
Wald test            = 110649  on 31 df,   p=<2e-16
Score (logrank) test = 132297  on 31 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 9.6 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
