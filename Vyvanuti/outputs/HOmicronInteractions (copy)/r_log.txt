
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/HOmicronInteractions.csv"              
[2] "VHI"                                             
[3] "outputs/HOmicronInteractions//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-08-29 19:38:12."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/HOmicronInteractions.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantHosp) ~ Immunity + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantHosp) ~ Immunity + AgeGr + 
    Sex, data = mtab, robust = FALSE)

  n= 16635219, number of events= 1962 

                          coef exp(coef) se(coef)       z Pr(>|z|)    
Immunityboost2-_alone -2.00430   0.13475  0.07507 -26.698  < 2e-16 ***
Immunityboost2+_alone -1.57750   0.20649  0.08860 -17.805  < 2e-16 ***
Immunityfull2-_alone  -0.59142   0.55354  0.12750  -4.638 3.51e-06 ***
Immunityfull2+_alone  -0.34285   0.70975  0.05711  -6.003 1.94e-09 ***
Immunityfull2+_inf6-  -2.88132   0.05606  0.70830  -4.068 4.74e-05 ***
Immunityinf6-_alone   -2.05556   0.12802  0.37999  -5.409 6.32e-08 ***
Immunityinf6-_boost2+ -1.25940   0.28382  1.00102  -1.258 0.208351    
Immunityinf6-_full2+  -2.63240   0.07191  1.00084  -2.630 0.008534 ** 
Immunityinf6+_alone   -2.57908   0.07584  0.31822  -8.105 5.29e-16 ***
Immunityinf6+_boost2- -4.05949   0.01726  0.50160  -8.093 5.82e-16 ***
Immunityinf6+_boost2+ -3.40050   0.03336  0.70849  -4.800 1.59e-06 ***
Immunityinf6+_full2-  -3.58580   0.02771  1.00076  -3.583 0.000340 ***
Immunityinf6+_full2+  -2.33423   0.09689  0.24573  -9.499  < 2e-16 ***
Immunitypart_alone    -0.49387   0.61026  0.24524  -2.014 0.044031 *  
AgeGr0-11              0.02370   1.02399  0.15547   0.152 0.878826    
AgeGr12-15            -0.22777   0.79631  0.22969  -0.992 0.321388    
AgeGr16-17             0.34582   1.41315  0.25894   1.336 0.181711    
AgeGr18-24             0.46024   1.58446  0.17378   2.648 0.008087 ** 
AgeGr25-29            -0.06770   0.93454  0.19796  -0.342 0.732375    
AgeGr30-34             0.06236   1.06435  0.18575   0.336 0.737071    
AgeGr35-39             0.09961   1.10474  0.18413   0.541 0.588507    
AgeGr45-49             0.28106   1.32454  0.17992   1.562 0.118247    
AgeGr50-54             0.59409   1.81138  0.17741   3.349 0.000812 ***
AgeGr55-59             0.96558   2.62631  0.16654   5.798 6.72e-09 ***
AgeGr60-64             1.08543   2.96073  0.16562   6.554 5.61e-11 ***
AgeGr65-69             1.70859   5.52119  0.15161  11.270  < 2e-16 ***
AgeGr70-74             2.07737   7.98345  0.14862  13.978  < 2e-16 ***
AgeGr75-79             2.83548  17.03855  0.14582  19.445  < 2e-16 ***
AgeGr80+               3.30421  27.22711  0.13932  23.717  < 2e-16 ***
SexZ                  -0.28670   0.75074  0.04589  -6.247 4.18e-10 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                      exp(coef) exp(-coef) lower .95 upper .95
Immunityboost2-_alone   0.13475    7.42089  0.116317   0.15612
Immunityboost2+_alone   0.20649    4.84282  0.173575   0.24565
Immunityfull2-_alone    0.55354    1.80656  0.431138   0.71069
Immunityfull2+_alone    0.70975    1.40895  0.634587   0.79381
Immunityfull2+_inf6-    0.05606   17.83789  0.013988   0.22468
Immunityinf6-_alone     0.12802    7.81120  0.060790   0.26961
Immunityinf6-_boost2+   0.28382    3.52331  0.039900   2.01893
Immunityinf6-_full2+    0.07191   13.90709  0.010112   0.51130
Immunityinf6+_alone     0.07584   13.18498  0.040649   0.14151
Immunityinf6+_boost2-   0.01726   57.94471  0.006457   0.04613
Immunityinf6+_boost2+   0.03336   29.97896  0.008320   0.13374
Immunityinf6+_full2-    0.02771   36.08236  0.003898   0.19704
Immunityinf6+_full2+    0.09689   10.32147  0.059854   0.15683
Immunitypart_alone      0.61026    1.63864  0.377369   0.98688
AgeGr0-11               1.02399    0.97658  0.755022   1.38876
AgeGr12-15              0.79631    1.25579  0.507653   1.24910
AgeGr16-17              1.41315    0.70764  0.850696   2.34748
AgeGr18-24              1.58446    0.63113  1.127088   2.22743
AgeGr25-29              0.93454    1.07004  0.634010   1.37754
AgeGr30-34              1.06435    0.93954  0.739555   1.53179
AgeGr35-39              1.10474    0.90519  0.770075   1.58485
AgeGr45-49              1.32454    0.75498  0.930931   1.88457
AgeGr50-54              1.81138    0.55207  1.279377   2.56460
AgeGr55-59              2.62631    0.38076  1.894905   3.64004
AgeGr60-64              2.96073    0.33775  2.140039   4.09614
AgeGr65-69              5.52119    0.18112  4.101853   7.43164
AgeGr70-74              7.98345    0.12526  5.966013  10.68310
AgeGr75-79             17.03855    0.05869 12.803040  22.67526
AgeGr80+               27.22711    0.03673 20.721207  35.77568
SexZ                    0.75074    1.33202  0.686157   0.82140

Concordance= 0.799  (se = 0.005 )
Likelihood ratio test= 3157  on 30 df,   p=<2e-16
Wald test            = 3276  on 30 df,   p=<2e-16
Score (logrank) test = 4377  on 30 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 8.783333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
