
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IOmicronDetail.csv"              
[2] "VI"                                        
[3] "outputs/IOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-09-01 19:18:26."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab)

  n= 18087116, number of events= 306357 

                       coef exp(coef)  se(coef)        z Pr(>|z|)    
VaccStatusAfull2  -0.715357  0.489017  0.229445   -3.118 0.001822 ** 
VaccStatusAfull3  -0.055402  0.946105  0.022133   -2.503 0.012311 *  
VaccStatusJfull1  -0.637732  0.528490  0.023114  -27.590  < 2e-16 ***
VaccStatusJfull2  -0.467587  0.626512  0.019770  -23.651  < 2e-16 ***
VaccStatusJfull3  -0.435709  0.646806  0.018628  -23.390  < 2e-16 ***
VaccStatusMboost1 -0.936785  0.391886  0.015059  -62.208  < 2e-16 ***
VaccStatusMboost2 -0.404282  0.667456  0.033349  -12.123  < 2e-16 ***
VaccStatusMfull1  -0.657111  0.518346  0.035192  -18.672  < 2e-16 ***
VaccStatusMfull2  -0.535621  0.585306  0.043191  -12.401  < 2e-16 ***
VaccStatusMfull3  -0.218121  0.804028  0.014148  -15.417  < 2e-16 ***
VaccStatusMpart1  -0.668803  0.512322  0.066163  -10.108  < 2e-16 ***
VaccStatusMpart2  -0.924018  0.396921  0.242559   -3.809 0.000139 ***
VaccStatusPboost1 -0.874528  0.417059  0.006787 -128.846  < 2e-16 ***
VaccStatusPboost2 -0.275189  0.759428  0.011773  -23.375  < 2e-16 ***
VaccStatusPfull1  -0.667443  0.513019  0.010265  -65.018  < 2e-16 ***
VaccStatusPfull2  -0.313755  0.730698  0.011529  -27.213  < 2e-16 ***
VaccStatusPfull3  -0.119007  0.887802  0.004674  -25.460  < 2e-16 ***
VaccStatusPpart1  -0.374204  0.687837  0.020252  -18.477  < 2e-16 ***
VaccStatusPpart2  -0.753523  0.470705  0.073009  -10.321  < 2e-16 ***
InfPriorinf1      -1.332245  0.263884  0.013554  -98.294  < 2e-16 ***
InfPriorinf2      -0.694399  0.499375  0.018702  -37.130  < 2e-16 ***
InfPriorinf3      -0.425992  0.653121  0.006983  -61.000  < 2e-16 ***
InfPriorinf4+     -0.156481  0.855148  0.008557  -18.287  < 2e-16 ***
AgeGr0-11         -0.664838  0.514357  0.008183  -81.241  < 2e-16 ***
AgeGr12-15         0.437357  1.548609  0.008552   51.142  < 2e-16 ***
AgeGr16-17         0.662512  1.939658  0.010408   63.655  < 2e-16 ***
AgeGr18-24         0.273938  1.315133  0.007930   34.546  < 2e-16 ***
AgeGr25-29        -0.063673  0.938312  0.008690   -7.327 2.35e-13 ***
AgeGr30-34        -0.005272  0.994742  0.008262   -0.638 0.523422    
AgeGr35-39         0.027197  1.027570  0.008150    3.337 0.000847 ***
AgeGr45-49         0.063900  1.065986  0.007971    8.016 1.09e-15 ***
AgeGr50-54        -0.159567  0.852512  0.009060  -17.612  < 2e-16 ***
AgeGr55-59        -0.377487  0.685582  0.009861  -38.281  < 2e-16 ***
AgeGr60-64        -0.832801  0.434830  0.011953  -69.672  < 2e-16 ***
AgeGr65-69        -1.263949  0.282536  0.014118  -89.525  < 2e-16 ***
AgeGr70-74        -1.585218  0.204903  0.016676  -95.061  < 2e-16 ***
AgeGr75-79        -1.620295  0.197840  0.020069  -80.737  < 2e-16 ***
AgeGr80+          -1.713321  0.180266  0.019705  -86.947  < 2e-16 ***
SexZ               0.112450  1.119016  0.003625   31.024  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2     0.4890     2.0449    0.3119    0.7667
VaccStatusAfull3     0.9461     1.0570    0.9059    0.9881
VaccStatusJfull1     0.5285     1.8922    0.5051    0.5530
VaccStatusJfull2     0.6265     1.5961    0.6027    0.6513
VaccStatusJfull3     0.6468     1.5461    0.6236    0.6709
VaccStatusMboost1    0.3919     2.5518    0.3805    0.4036
VaccStatusMboost2    0.6675     1.4982    0.6252    0.7125
VaccStatusMfull1     0.5183     1.9292    0.4838    0.5554
VaccStatusMfull2     0.5853     1.7085    0.5378    0.6370
VaccStatusMfull3     0.8040     1.2437    0.7820    0.8266
VaccStatusMpart1     0.5123     1.9519    0.4500    0.5833
VaccStatusMpart2     0.3969     2.5194    0.2467    0.6385
VaccStatusPboost1    0.4171     2.3977    0.4115    0.4226
VaccStatusPboost2    0.7594     1.3168    0.7421    0.7772
VaccStatusPfull1     0.5130     1.9492    0.5028    0.5234
VaccStatusPfull2     0.7307     1.3686    0.7144    0.7474
VaccStatusPfull3     0.8878     1.1264    0.8797    0.8960
VaccStatusPpart1     0.6878     1.4538    0.6611    0.7157
VaccStatusPpart2     0.4707     2.1245    0.4079    0.5431
InfPriorinf1         0.2639     3.7895    0.2570    0.2710
InfPriorinf2         0.4994     2.0025    0.4814    0.5180
InfPriorinf3         0.6531     1.5311    0.6442    0.6621
InfPriorinf4+        0.8551     1.1694    0.8409    0.8696
AgeGr0-11            0.5144     1.9442    0.5062    0.5227
AgeGr12-15           1.5486     0.6457    1.5229    1.5748
AgeGr16-17           1.9397     0.5156    1.9005    1.9796
AgeGr18-24           1.3151     0.7604    1.2949    1.3357
AgeGr25-29           0.9383     1.0657    0.9225    0.9544
AgeGr30-34           0.9947     1.0053    0.9788    1.0110
AgeGr35-39           1.0276     0.9732    1.0113    1.0441
AgeGr45-49           1.0660     0.9381    1.0495    1.0828
AgeGr50-54           0.8525     1.1730    0.8375    0.8678
AgeGr55-59           0.6856     1.4586    0.6725    0.6990
AgeGr60-64           0.4348     2.2998    0.4248    0.4451
AgeGr65-69           0.2825     3.5394    0.2748    0.2905
AgeGr70-74           0.2049     4.8804    0.1983    0.2117
AgeGr75-79           0.1978     5.0546    0.1902    0.2058
AgeGr80+             0.1803     5.5474    0.1734    0.1874
SexZ                 1.1190     0.8936    1.1111    1.1270

Concordance= 0.689  (se = 0 )
Likelihood ratio test= 142565  on 39 df,   p=<2e-16
Wald test            = 112970  on 39 df,   p=<2e-16
Score (logrank) test = 133409  on 39 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 12.06667 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
