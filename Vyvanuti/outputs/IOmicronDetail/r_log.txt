
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "data/temp/IOmicronDetail.csv"              
[2] "VI"                                        
[3] "outputs/IOmicronDetail//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2022-02-23 01:06:30."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+   Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+   Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+   custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+   cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab))
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: data/temp/IOmicronDetail.csv"
[1] "...and Cox formula: Surv(T1,T2,VariantInf) ~ VaccStatus + InfPrior + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, VariantInf) ~ VaccStatus + InfPrior + 
    AgeGr + Sex, data = mtab, cluster = Subject)

  n= 18087592, number of events= 306440 

                       coef exp(coef)  se(coef) robust se        z Pr(>|z|)    
VaccStatusAfull2  -0.716038  0.488685  0.229445  0.229559   -3.119 0.001814 ** 
VaccStatusAfull3  -0.055325  0.946178  0.022118  0.022138   -2.499 0.012451 *  
VaccStatusJfull1  -0.637095  0.528826  0.023102  0.023122  -27.554  < 2e-16 ***
VaccStatusJfull2  -0.468181  0.626140  0.019770  0.019779  -23.670  < 2e-16 ***
VaccStatusJfull3  -0.436315  0.646414  0.018628  0.018630  -23.420  < 2e-16 ***
VaccStatusMboost1 -0.937027  0.391791  0.015054  0.015083  -62.125  < 2e-16 ***
VaccStatusMboost2 -0.405012  0.666969  0.033331  0.033362  -12.140  < 2e-16 ***
VaccStatusMfull1  -0.657668  0.518058  0.035192  0.035220  -18.673  < 2e-16 ***
VaccStatusMfull2  -0.534361  0.586043  0.043151  0.043213  -12.366  < 2e-16 ***
VaccStatusMfull3  -0.217956  0.804161  0.014143  0.014143  -15.411  < 2e-16 ***
VaccStatusMpart1  -0.669037  0.512201  0.066163  0.066235  -10.101  < 2e-16 ***
VaccStatusMpart2  -0.924293  0.396812  0.242559  0.242762   -3.807 0.000140 ***
VaccStatusPboost1 -0.875081  0.416828  0.006786  0.006808 -128.542  < 2e-16 ***
VaccStatusPboost2 -0.276445  0.758475  0.011771  0.011983  -23.070  < 2e-16 ***
VaccStatusPfull1  -0.667713  0.512880  0.010264  0.010299  -64.833  < 2e-16 ***
VaccStatusPfull2  -0.313859  0.730622  0.011527  0.011549  -27.176  < 2e-16 ***
VaccStatusPfull3  -0.119327  0.887518  0.004674  0.004683  -25.481  < 2e-16 ***
VaccStatusPpart1  -0.374308  0.687765  0.020252  0.020295  -18.444  < 2e-16 ***
VaccStatusPpart2  -0.753700  0.470622  0.073009  0.073016  -10.322  < 2e-16 ***
InfPriorinf1      -1.331804  0.264001  0.013550  0.013544  -98.333  < 2e-16 ***
InfPriorinf2      -0.691932  0.500608  0.018680  0.018681  -37.039  < 2e-16 ***
InfPriorinf3      -0.423991  0.654430  0.006976  0.006987  -60.680  < 2e-16 ***
InfPriorinf4+     -0.155880  0.855662  0.008552  0.008577  -18.173  < 2e-16 ***
AgeGr0-11         -0.665239  0.514151  0.008183  0.008129  -81.834  < 2e-16 ***
AgeGr12-15         0.437070  1.548164  0.008551  0.008513   51.341  < 2e-16 ***
AgeGr16-17         0.662184  1.939022  0.010407  0.010420   63.549  < 2e-16 ***
AgeGr18-24         0.273678  1.314791  0.007929  0.007939   34.471  < 2e-16 ***
AgeGr25-29        -0.064039  0.937969  0.008689  0.008692   -7.367 1.74e-13 ***
AgeGr30-34        -0.005528  0.994488  0.008261  0.008257   -0.669 0.503194    
AgeGr35-39         0.027093  1.027464  0.008149  0.008147    3.325 0.000883 ***
AgeGr45-49         0.063841  1.065923  0.007970  0.007994    7.986 1.39e-15 ***
AgeGr50-54        -0.159456  0.852607  0.009059  0.009080  -17.561  < 2e-16 ***
AgeGr55-59        -0.377249  0.685746  0.009859  0.009878  -38.190  < 2e-16 ***
AgeGr60-64        -0.832288  0.435053  0.011950  0.011950  -69.649  < 2e-16 ***
AgeGr65-69        -1.263022  0.282798  0.014112  0.014137  -89.345  < 2e-16 ***
AgeGr70-74        -1.583440  0.205268  0.016663  0.016774  -94.398  < 2e-16 ***
AgeGr75-79        -1.617603  0.198374  0.020047  0.020251  -79.878  < 2e-16 ***
AgeGr80+          -1.707950  0.181237  0.019662  0.019836  -86.104  < 2e-16 ***
SexZ               0.112395  1.118955  0.003624  0.003633   30.934  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                  exp(coef) exp(-coef) lower .95 upper .95
VaccStatusAfull2     0.4887     2.0463    0.3116    0.7664
VaccStatusAfull3     0.9462     1.0569    0.9060    0.9881
VaccStatusJfull1     0.5288     1.8910    0.5054    0.5533
VaccStatusJfull2     0.6261     1.5971    0.6023    0.6509
VaccStatusJfull3     0.6464     1.5470    0.6232    0.6705
VaccStatusMboost1    0.3918     2.5524    0.3804    0.4035
VaccStatusMboost2    0.6670     1.4993    0.6248    0.7120
VaccStatusMfull1     0.5181     1.9303    0.4835    0.5551
VaccStatusMfull2     0.5860     1.7064    0.5385    0.6378
VaccStatusMfull3     0.8042     1.2435    0.7822    0.8268
VaccStatusMpart1     0.5122     1.9524    0.4498    0.5832
VaccStatusMpart2     0.3968     2.5201    0.2466    0.6386
VaccStatusPboost1    0.4168     2.3991    0.4113    0.4224
VaccStatusPboost2    0.7585     1.3184    0.7409    0.7765
VaccStatusPfull1     0.5129     1.9498    0.5026    0.5233
VaccStatusPfull2     0.7306     1.3687    0.7143    0.7473
VaccStatusPfull3     0.8875     1.1267    0.8794    0.8957
VaccStatusPpart1     0.6878     1.4540    0.6609    0.7157
VaccStatusPpart2     0.4706     2.1248    0.4079    0.5430
InfPriorinf1         0.2640     3.7879    0.2571    0.2711
InfPriorinf2         0.5006     1.9976    0.4826    0.5193
InfPriorinf3         0.6544     1.5280    0.6455    0.6635
InfPriorinf4+        0.8557     1.1687    0.8414    0.8702
AgeGr0-11            0.5142     1.9450    0.5060    0.5224
AgeGr12-15           1.5482     0.6459    1.5225    1.5742
AgeGr16-17           1.9390     0.5157    1.8998    1.9790
AgeGr18-24           1.3148     0.7606    1.2945    1.3354
AgeGr25-29           0.9380     1.0661    0.9221    0.9541
AgeGr30-34           0.9945     1.0055    0.9785    1.0107
AgeGr35-39           1.0275     0.9733    1.0112    1.0440
AgeGr45-49           1.0659     0.9382    1.0494    1.0828
AgeGr50-54           0.8526     1.1729    0.8376    0.8679
AgeGr55-59           0.6857     1.4583    0.6726    0.6992
AgeGr60-64           0.4351     2.2986    0.4250    0.4454
AgeGr65-69           0.2828     3.5361    0.2751    0.2907
AgeGr70-74           0.2053     4.8717    0.1986    0.2121
AgeGr75-79           0.1984     5.0410    0.1907    0.2064
AgeGr80+             0.1812     5.5176    0.1743    0.1884
SexZ                 1.1190     0.8937    1.1110    1.1270

Concordance= 0.688  (se = 0 )
Likelihood ratio test= 142450  on 39 df,   p=<2e-16
Wald test            = 113408  on 39 df,   p=<2e-16
Score (logrank) test = 133326  on 39 df,   p=<2e-16,   Robust = 138071  p=<2e-16

  (Note: the likelihood ratio and score tests assume independence of
     observations within a cluster, the Wald and robust score tests do not).
[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 18.83333 mins
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
